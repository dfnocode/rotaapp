//TODO criar uma quantidade de letra que o usuário têm de preencher ao começar a aparecer os resultados
//TODO melhorar a função mover com o cursor para poder clicar
//TODO não está funcionando o clicar sobre a função
    //?? maneira de remover o settimeout
//TODO criar regras de validação

function Suggest (conf) {
    this.config = {
        data : [], //url or array objects id,value
        input: null,
        afterSelect: null,
        same: true,
        validation: null
    };
    LerConfiguracoes(this.config, conf);
    this.build();
    this.selecteds = {};
}

Suggest.prototype.validate = function (item) {
    //TODO: pode resumir esta validação caso precise
    if (!this.config.same && this.selecteds[item.id]) {
        return false;
    }
    if (this.config.validation) {
        return this.config.validation(item);
    }
    return true;
};

Suggest.prototype.select = function(val) {
    this.config.afterSelect(val);
    this.selecteds[val.id] = true;
};

Suggest.prototype.normalize = function() {
    var options = [];
    for (var alias in this.config.data) {
        options.push({
            label: this.config.data[alias].label,
            id: alias
        });
    }
    this.config.data = options;
};

Suggest.prototype.build = function() {
    if (typeof this.config.data != 'string' && !this.config.data.length) {
        this.normalize();
    }
    this.bindEvents();
};

Suggest.prototype.bindEvents = function() {
    var ref = this;
    this.config.input.on('keyup', function(e) {
        if (ref.drops == null) {
            ref.search($(this).val());
            return;
        }
        if (e.keyCode >=35 && e.keyCode <=40){
            if (e.keyCode ==37 || e.keyCode ==39) {
                return;
            }
            var previous = $(ref.drops.find('.dropdown-item.selected'));
            previous.removeClass('selected');
            var el;
            if (e.keyCode == 40) {
                el = previous.next();
                if (el.length == 0) {
                    el = ref.drops[0].children[0];
                }
            } else if(e.keyCode == 38) {
                el = previous.prev();
                if (el.length == 0) {
                    el = ref.drops[0].children[ref.drops[0].children.length -1];
                }
            } else if(e.keyCode == 36) {
                el = ref.drops[0].children[0];
            } else {
                el = ref.drops[0].children[ref.drops[0].children.length -1];
            }
            $(el).addClass('selected');
            return;
        }
        if (e.keyCode == 13) {
            $(ref.drops.find('.dropdown-item.selected')).trigger('suggest:select');
            return;
        }
        ref.search($(this).val());
    });
    var fnFocus = function() {
        $(this).unbind('focus', fnFocus);
        ref.search($(this).val());
        $(this).on('focus', fnFocus);
    };
    this.config.input.on('focus', fnFocus);
    this.config.input.on('focusout', function() {
        if (ref.drops && ref.drops.has(':hover').length > 0) {
            return;
        }
        setTimeout(function(){ ref.remove(); }, 100);
    });
};

Suggest.prototype.search = function (query) {
    if (typeof this.config.data == 'string') {
        return; // TODO not implemented
    }
    if (!query || !query.trim()) {
        this.show(this.config.data);
        return;
    }
    var options = [];
    for (var i = 0; i < this.config.data.length; i++) {
        if (!this.validate(this.config.data[i])) {
            continue;
        }
        var search = this.isSearch(this.config.data[i].label, query);
        if (!search) {
            continue;
        }
        options.push({
            text: search ,
            default : this.config.data[i]
        });
    }
    this.show(options, true);
};

Suggest.prototype.remove = function () {
    if (this.drops) {
        this.drops.remove();
    }
    this.drops = false;
};

Suggest.prototype.show = function (options, hasValidated) {
    this.remove();
    this.drops = [];
    var ref = this;
    for (var i = 0; i < options.length; i++) {
        if (!hasValidated && !this.validate(options[i])) {
            continue;
        }
        this.drops.push(
            $('<div>', { class:'dropdown-item', html: options[i].label })
            .on('click suggest:select', function() {
                var opt = options[i].default || options[i];
                return function() {
                    ref.select(opt);
                    ref.remove();
                };
            }())
        );
    }
    if (this.drops.length == 0) {
        this.drops = null;
        return;
    }
    this.drops = $('<div>', { class:'dropdown-menu'}).append(this.drops);
    this.drops.insertAfter(this.config.input);
    this.config.input.dropdown('toggle');
};

//TODO sufix with problem
Suggest.prototype.highlight = function (string, indexes, query) {
    var prefix = '';
    var sufix = '';
    if (indexes.e != 0) {
        prefix = string.substring(indexes.s, indexes.e);
    }
    if ((indexes.s -indexes.e > 1) && indexes.e != string.length - 1) {
        sufix = string.substring(indexes.s + query.length, indexes.e + query.length);
    }
    return prefix + '<mark>' + string.substring(indexes.e, indexes.e + query.length) + '</mark>' + sufix;
};

//TODO usar o crazy search
Suggest.prototype.isSearch = function(string, query) {
    if (string === undefined || string == '') {
        return;
    }
    var length = query.length;
    var startIndex = 0, index, find;
    query = query.toLowerCase();
    var original = string;
    var final = '';
    string = string.toLowerCase();
    while ((index = string.indexOf(query, startIndex)) > -1) {
        find = true;
        final += this.highlight(original, { 's':startIndex, 'e':index }, query);
        startIndex = index + length;
    }
    if (!find) {
        return false;
    }
    if (startIndex < string.length - 1) {
        final += original.substring(startIndex);
    }
    return final;
};