function DataTable(config) {
	this.constructor(config);
}

DataTable.prototype.constructor = function(config) {
	if (config['dataTableId'] != undefined) {
		dataTableId = config['dataTableId'];
	} else {
		dataTableId = 'datatable';
	}
    this.config = {
        service: null,
        infinityScroll: false,
        list: 'listar',
        debug : false,
        filter: null,
		fields : [],
		messageWait:null,
		valIndex: false,
		alwaysShowSum: false,
		actionBar: null,
		feed : {
			id : 'id',
			data : null,
			paginacao : {
				atual : pagina,
				totalRegistros : 0,
				registrosPagina : 0
			}
		},
		views: null,
		contextMenu : null,
		idField: 'id',
		checkbox : {
			pipe : null,
			keepSelected : true,
			visible: true,
			afterCheck : function(total) {
				color = '#CCC';
				disabled = true;
				var i;
				var blockeds = document.getElementsByClassName('active-when-selected');
				var unblockedButtons = document.querySelectorAll('.main-actions > button:not(.active-when-selected):not(.link-sel):not(.always-active), .main-actions > div > button:not(.active-when-selected):not(.link-sel):not(.always-active)');
				var unblockedMoreActions = document.querySelectorAll('.action-list > .action-item:not(.active-when-selected):not(.always-active)');
				var unblockeds = Array.prototype.slice.call(unblockedMoreActions).concat(Array.prototype.slice.call(unblockedButtons));
				if (total > 0) {
					color = '#E52525';
					disabled = false;
					if (ref.config.actionBar) {
						ref.config.actionBar.enableActions(false, false, blockeds, unblockeds);
					}
				} else if (ref.config.actionBar) {
					ref.config.actionBar.enableActions(false, true, unblockeds, blockeds);
				}
				var actExcuir = document.getElementsByClassName('act-excluir');
				for (i = 0, length = actExcuir.length; i<length;i++) {
					actExcuir[i].style.color = color;
					actExcuir[i].disabled = disabled;
				}
			}
		},
		line : {
			onClick : false,
			pipe : null
		},
		dataTable: document.getElementById(dataTableId),
		exibeQtdSelecionados: true,
		pipelines : {
			marcadores : function(icons) {
				var tags = document.createDocumentFragment();
				for (var i = 0, iconsLength = icons.length; i < iconsLength; i++) {
					for (var icon in icons[i]) {
						var tag = document.createElement(icon);
						tag.title = icons[i][icon].alt;
						tag.alt = icons[i][icon].alt;
						for ( var prop in icons[i][icon]) {
							tag.setAttributes(prop, icons[i][icon]);
						}
						tags.appendChild(tag);
					}
				}
				var span = document.createElement('span');
					span.className = 'marcadores';
					span.appendChild(tags);
				return span;
			},
			concat : function(res, fields, separator) {
				if (separator == undefined) {
					separator = ' ';
				}
				if (!Array.isArray(fields)) {
					fields = [fields];
				}
				var fieldsLength = fields.length;
				for (var i = 0; i < fieldsLength; i++) {
					if (this.data[fields[i]] == '') {
						continue;
					}
					res = res + separator +  this.data[fields[i]];
				}
				return res;
			},
			getCircleColor: function(situacao) {
				for (var i = 0; i< situacoes.length; i++) {
					if (situacoes[i].id == situacao) {
						var span = document.createElement('span');
							span.style.color = situacoes[i].cor;
							span.className = 'fas fa-circle';
							span.title = situacoes[i].nome;
						return span;
					}
				}
			},
			htmlEntities: function (str) {
				if (!str || typeof str != 'string') {
					return str;
				}
				return String(str).replace(/</g, '&lt;').replace(/>/g, '&gt;');
			},
			removeTags: function (str) {
				if (!str || typeof str != 'string') {
					return str;
				}
				return str.replace(/<[^>]*script*[^>]*>/g,'');
			}
		}
	};
	this.isListed = false;
	LerConfiguracoes(this.config, config);
	var classe = this;
	var ref = this;
	classe.selecteds = {
		itens: {},
		pageLength:0,
		length: 0,
		orders: {
			first: null,
			last: null,
		},
		add : function (id) {
			if (this.itens[id]) {
				return;
			}
			if (!this.orders.first) {
				this.orders.first = id;
			}
			this.orders[id] = {
				previous :this.orders.last
			};
			if (this.orders.last && this.orders.last != id) {
				this.orders[this.orders.last].next = id;
			}
			this.orders.last = id;
			this.itens[id] = ref.rDatas[id];
			this.length++;
			this.pageLength++;
		},
		remove : function (id, allReadyIsResetedRow) {
			if (!this.itens[id]) {
				return;
			}
			if (!allReadyIsResetedRow) {
				if (ref.ckBoxSelects.get(id)) {
					ref.ckBoxSelects.get(id).checked = false;
					ref.linhas[id].className = ref.linhas[id].className.replace(/\bselected\b/g, '');
				}
			}
			if (this.orders[id].previous) {
				if (this.orders[this.orders[id].previous]) {
					this.orders[this.orders[id].previous].next = this.orders[id].next;
				}
			} else {
				this.orders.first = this.orders[id].next;
			}
			if (this.orders[id].next) {
				this.orders[this.orders[id].next].previous = this.orders[id].previous;
			}
			else {
				this.orders.last = this.orders[id].previous;
			}
			delete this.itens[id];
			delete this.orders[id];
			this.length--;
			this.pageLength--;
		},
		getIds: function () {
			var ids = [];
			for (var item in this.itens) {
				ids.push(this.itens[item][ref.config.idField]);
			}
			return ids;
		},
		getStringIds: function (format) {
			var separator = format.separator || ',';
			var ids = '';
			for (var item in this.itens) {
				ids += separator + this.itens[item][ref.config.idField];
			}
			return ids.substring(1);
		},
		getObjectKeyIds: function () {
			var ids = {};
			for (var item in this.itens) {
				ids[this.itens[item][ref.config.idField]] = {};
			}
			return ids;
		},
		resetAll : function (hard) {
			ref.lastChecked = null;
			if (!hard) {
				for (var item in this.itens) {
					this.remove(item);
				}
			}
			if (ref.selectAll) {
				ref.selectAll.checked = false;
			}
			this.itens = {};
			this.length = 0;
			this.pageLength = 0;
			ref.updateTotalSelecteds();
		},
		getOrdened: function() {
			var itens = [];
			var el = this.orders.first;
			var sec = 0;
			while (el && sec < 1000) {
				sec++;
				itens.push(el);
				el = this.orders[el].next;
			}
			return itens;
		}
	};
	var wait = document.getElementById('wait');
	if (!wait) {
		wait = document.createElement('div');
		wait.id = 'wait';
		wait.className = 'pleasewait';
		document.querySelector('body').appendChild(wait);
	}
	if (this.config.filter) {
		if (!(this.config.filter instanceof Filter)) {
			this.config.filter = new Filter(this.config.filter);
			if (typeof filter != 'undefined') {
				filter = this.config.filter;
			}
		}
		this.config.filter.config.datatable = this;
		this.config.filter.messages.config.datatable = this;
	}
	if (typeof actionBar != 'undefined') {
		this.config.actionBar = actionBar;
		if (!(ref.config.actionBar instanceof ActionBar)) {
			ref.config.actionBar = new ActionBar(ref.config.actionBar);
		}
	}
	var main = document.getElementById('main-container');
	if (main) {
		if (main.className.indexOf('is-datalist') == -1) {
			main.className = main.className + ' is-datalist';
		}
	}
	this.intercept();
	getIdsSelectedItens = function(format) {
		return ref.getSelectedsIds(format);
	};
	getIdsSelectedItems = function(format) {
		return ref.getSelectedsIds(format);
	};
	resetSelectedItems = function() {
		return ref.selecteds.resetAll();
	};
	validarSelectedItens = function() {
		ref.validateSelectedItems();
	};
};

DataTable.prototype.setActionBar = function(actionBar) {
	if (actionBar instanceof ActionBar) {
		this.config.actionBar = actionBar;
		actionBar.objBar.removeClass('hide');
	}
}

DataTable.prototype.resetContextMenu = function(id) {
	this.linhas[id].querySelector('ul.dropdown-menu').innerHTML = '';
};

DataTable.prototype.validateSelectedItems = function() {
	var limiteSelecionados = (this.config.feed.paginacao.registrosPagina || 100) * 2;
	if (this.selecteds.length > limiteSelecionados) {
		DialogMessage.warning({ 'description': 'Por favor, selecione no máximo ' + limiteSelecionados });
		return false;
	}
	if (this.selecteds.length > 0) {
		return true;
	}
	//deixar esta função mais informativa e opcional
	DialogMessage.warning({ 'description': 'Nenhum item selecionado.' });
	return false;
};

DataTable.prototype.getSelecteds = function() {
	return this.selecteds.itens;
};

DataTable.prototype.getSelectedsIds = function(format) {
	if (format && format.asString) {
		return this.selecteds.getStringIds(format);
	}
	if (format && format.asObjectKey) {
		return this.selecteds.getObjectKeyIds();
	}
	return this.selecteds.getIds();
};

DataTable.prototype.getSelectedsIdsBySelection = function() {
	return this.selecteds.getOrdened();
};

DataTable.prototype.resetSelecteds = function() {
	return this.selecteds.resetAll();
};

DataTable.prototype.selectItem = function(checkbox, id, e) {
	if (checkbox.disabled) {
		return;
	}
	var checked = !checkbox.checked;
	if (e.shiftKey) {
		this.selectMultipleCheckboxes(checkbox);
	}
	this.changeCheck(id, checked);
	if (checked) {
		this.linhas[id].className = this.linhas[id].className + ' selected';
	} else {
		this.linhas[id].className = this.linhas[id].className.replace(/\bselected\b/g, '');
	}
	if (this.config.exibeQtdSelecionados) {
		this.updateTotalSelecteds();
	}
	this.lastChecked = checkbox;
	this.selectAll.checked  = (this.selecteds.pageLength == (this.ckBoxSelects.length - this.ckBoxSelects.disableds));
};

DataTable.prototype.selectMultipleCheckboxes = function(checkbox) {
	if (!this.lastChecked) {
		return;
	}
	var checked = !checkbox.checked;
	var end;
	var ref = this;
	this.ckBoxSelects.each(function(index, element) {
		if (element.disabled) {
			return;
		}
		if (!end || end.length == 0) {
			if (element == ref.lastChecked) {
				end = checkbox;
			} else if(element == checkbox) {
				if (typeof InstallTrigger !== 'undefined') {
					element.checked = checked;
				}
				end = ref.lastChecked;
				return;
			} else {
				return;
			}
		}
		ref.changeCheck(element.value, checked);
		if (element == end) {
			if (typeof InstallTrigger !== 'undefined') {
				element.checked = checked;
			}
			return false;
		} else if (element == checkbox) {
			return;
		}
		element.checked = checked;
		if (element.checked) {
			ref.linhas[element.value].className = ' selected';
		} else {
			ref.linhas[element.value].className = ref.linhas[element.value].className.replace(/\bselected\b/g, '');
		}
	});
};

DataTable.prototype.buildTotals = function(data, label, value) {
	var span = document.createElement('span');
	span.className = 'info-label';
	span.textContent = label;
	var div = document.createElement('div');
	div.className = 'info-value';
	div.textContent = value;
	data.appendChild(span);
	data.appendChild(div);
};

DataTable.prototype.updateTotalSelecteds = function() {
	if (this.config.checkbox.afterCheck) {
		this.config.checkbox.afterCheck(this.selecteds.length);
	}
	var selecionados = document.getElementById('selecionados');
	if (selecionados) {
		selecionados.style.display = 'none';
		selecionados.innerHTML = '';
		if (this.selecteds.length) {
			var divSaldoGeral = document.getElementById('saldo-geral');
			var divTotals = document.getElementById('valor-total-lista');
			var exibeSoma = (divTotals && divTotals.style.display != 'none') || (divSaldoGeral && divSaldoGeral.style.display != 'none') || this.config.alwaysShowSum;
			var data = document.createDocumentFragment();
			if (this.config.valIndex && exibeSoma) {
				var selecteds = this.selecteds.itens;
				var value = 0;
				for (var selected in selecteds) {
					if (selecteds[selected][this.config.valIndex]) {
						var currVal = selecteds[selected][this.config.valIndex];
						if (typeof currVal == 'string') {
							var comma = currVal.indexOf(',');
							if (comma != -1) {
								currVal = currVal.replace(/\./g,'').replace(',','.');
							}
						}
						value += parseFloat(currVal);
					}
				}
				this.buildTotals(data, 'Valor', nroBra(value));
			}
			this.buildTotals(data, 'Selecionados', this.selecteds.length);
			var html = document.createElement('div');
			html.className = 'totais';
			html.appendChild(data);
			selecionados.style.display = 'block';
			selecionados.appendChild(html);
		} else {
			this.updateHeadPos();
		}
	}
	if (this.config.filter) {
		this.config.filter.updateTotalSelecteds(this.selecteds);
	}
};

DataTable.prototype.getHeadPos = function() {
	var filter = this.config.filter;
	var top = 145;
	if (filter && filter.config) {
		filter = filter.config.tagArea[0];
		cord = filter.getBoundingClientRect();
		top = 80 + cord.height;
	}
	return top;
}

DataTable.prototype.updateHeadPos = function() {
	if (!this.header) {
		return;
	}
	var top = this.getHeadPos();
	var ths = this.header.querySelectorAll('th');
	for (var i = 0, tot = ths.length; i < tot; i++) {
		ths[i].setAttribute('style', 'top: ' + top + 'px');
	}
}

DataTable.prototype.buildHeader = function() {
	var classe = this;
	var that = this;
	var rows = document.createDocumentFragment();
	var top = this.getHeadPos();
	if (this.config.checkbox.visible) {
		this.selectAll = document.createElement('input');
		this.selectAll.id = 'selectAll' + this.config.dataTable.id;
		this.selectAll.setAttribute('value','');
		var th = document.createElement('th');
		th.setAttribute('style', 'top: ' + top + 'px');
		th.width = '42px';
		th.addClass('hidden-xs');
		th.appendChild(
			this.buildCheckBox(this.selectAll, function() {
				var checked = !classe.selectAll.checked;
				var fnChangeClass = function(element) {
					classe.linhas[element.value].className = classe.linhas[element.value].className + ' selected';
				};
				if (!checked) {
					fnChangeClass = function(element) {
						classe.linhas[element.value].className = classe.linhas[element.value].className.replace(/\bselected\b/g, '');
					};
				}
				classe.ckBoxSelects.each(function(id, element) {
					if (element.disabled) {
						classe.ckBoxSelects.disableds++;
						return;
					}
					classe.changeCheck(element.value, checked);
					element.checked = checked;
					fnChangeClass(element);
				});
				if (classe.config.exibeQtdSelecionados) {
					classe.updateTotalSelecteds();
				}
			})
		);
		rows.appendChild(th);
	}
	var cfgLength = this.config.fields.length;
	for (var idcFields = 0; idcFields < cfgLength; idcFields ++) {
		var field = this.config.fields[idcFields];
		if (typeof field == 'string') {
			field = {
				label: field ,
				prop: camelize(sanitize(field, ' '), ' ')
			};
		} else if (field.prop == undefined && field.label !== undefined) {
			field.prop = camelize(sanitize(field.label, ' '), ' ');
		}
		field.prop = field.prop || '';
		field.label = field.label || '';
		field.alwaysRender = field.alwaysRender || false;
		if (!field.alwaysRender) {
			if ((field.prop != '' && this.config.feed.data[0][field.prop] === undefined ) || !this.viewHasField(field.prop)) {
				if (this.config.debug) {
					console.log('Data-Table: a propriedade '+ field.prop + ' não foi encontrada na alimentação de dados');
				}
				continue;
			}
		}
		if (field.pipe) {
			if (typeof field.pipe == 'function') {
				field.pipe = {
					name : field.pipe,
					params : []
				};
			} else if (typeof field.pipe == 'string' || typeof field.pipe.name == 'string') {
				var name = field.pipe.name || field.pipe;
				var pipeline = this.config.pipelines[name];
				var params = field.pipe.params || [];
				if (pipeline == undefined) {
					pipeline = window[name];
				}
				field.pipe = {
					name : pipeline,
					params : params
				};
			}
		}
		this.config.fields[idcFields] = field;
		if (!this.hasPermission(field.permissions)) {
			continue;
		}
		var props = {};
		var thItem = document.createElement('th');
		thItem.setAttribute('style', 'top: ' + top + 'px');
		var label = field.label;
		if (typeof field.label == 'function') {
			label = field.label();
		}
		thItem.title = label;
		thItem.innerHTML = label;
		if (field.attributes != undefined) {
			props = field.attributes;
			for (var prop in props) {
				thItem.setAttribute(prop, props[prop]);
			}
		}
		thItem.addClass(props.class || '');
		rows.appendChild(thItem);
	}
	if (this.contextMenu) {
		var thContext = document.createElement('th');
		thContext.addClass('hidden-xs');
		thContext.style.width = '40px';
		thContext.setAttribute('style', 'top: ' + top + 'px');
		rows.appendChild(thContext);
	}
	var tr = document.createElement('tr');
	tr.appendChild(rows);
	tr.addClass('hidden-xs');
	var selectAllMobile = document.createElement('span');
	selectAllMobile.innerText = 'Selecionar todos';
	selectAllMobile.addClass('link');
	selectAllMobile.addEventListener('click', function() {
		that.selectAll.nextElementSibling.click()
	});
	var thead = document.createElement('thead');
	var spacer = document.createElement('tr');
	spacer.className = 'spacer visible-xs';
	spacer.style['padding-top'] = '15px';
	spacer.appendChild(selectAllMobile);
	thead.appendChild(tr);
	this.header = tr;
	thead.appendChild(spacer);
	return thead;
};

DataTable.prototype.buildPagination = function(content) {
	var paginationContent = null;
	if (this.config.infinityScroll) {
		paginationContent = this.paginationInfinity();
	} else {
		paginationContent = this.pagination();
	}
	if (!paginationContent) {
		return;
	}
	var that = this;
	var nav = this.createElement('nav', function() {
		that.paginacao = that.createElement('ul', paginationContent);
		that.paginacao.className = 'pagination';
		return that.paginacao;
	}());
	nav.setAttribute('aria-label', 'Page navigation');
	nav.id = 'pagination';
	nav.className = 'noselect';
	content.appendChild(nav);
};

DataTable.prototype.intercept = function () {
	var ref = this;
	var main = document.getElementById('main-container');
	var breadcrumb = document.getElementsByClassName('breadcrumb')[0];
	var container = document.getElementById('container');
	window[this.config.list] = Interceptor.intercept(function() {
		ref.config.dataTable.opacity = '0.3';
		ref.displayWait();
		if (main) {
			main.style.background = '#F2FAF8';
		}
		if (container) {
			container.style.background = '#F2FAF8';
		}
	}, this.config.list, { debug : this.config.debug });
	ref.isEditing = false;
	if (this.config.filter) {
		if (!this.config.line.onClick) {
			ref.showFilterArea();
			return;
		}
		if (window.displayForm) {
			window.displayForm = Interceptor.intercept(function() {
				ref.isEditing = true;
				if (main) {
					main.style.height = 'inherit';
				}
				if (breadcrumb) {
					if (document.querySelector('.bling-form')) {
						breadcrumb.className += ' on-edit';
					} else {
						breadcrumb.style.display = 'none';
					}
				}
				ref.config.filter.config.area.hide();
				var lateral = document.querySelector('.side.new-box-side');
				lateral.className = lateral.className + ' hide';
				if (typeof actionBar != 'undefined' && actionBar.isMinimized) {
					ref.actionMinimized = true;
					actionBar.chevronTrigger.click();
				}
				if (main) {
					main.style.height = 'auto';
					main.style.minHeight = '100%';
					main.style.overflow = 'hidden';
				}
			}, 'displayForm', {
				debug : this.config.debug,
			});
			main.style.height = 'auto';
			main.style.minHeight = '100%';
			main.style.overflow = 'hidden';
		}
		if (window.displaySearch) {
			window.displaySearch = Interceptor.intercept(function() {
				if (typeof actionBar != 'undefined' && ref.actionMinimized) {
					ref.actionMinimized = false;
					actionBar.chevronTrigger.click();
				}
				if (breadcrumb) {
					if (document.querySelector('.bling-form')) {
						breadcrumb.className = breadcrumb.className.replace(/ on-edit/g, '');
					} else {
						breadcrumb.style.display = 'inline-block';
					}
				}
				if (main) {
					main.style.background = '#F2FAF8';
					main.style.height = '100%';
					main.style.removeProperty('min-height');
					main.style.removeProperty('overflow');
				}
				if (container) {
					container.style.background = '#F2FAF8';
				}
				ref.showFilterArea();
				ref.HighLightEditing();
			}, 'displaySearch', {
				debug : this.config.debug,
				execAfter: true
			});
			main.style.height = '100%';
			main.style.removeProperty('min-height');
			main.style.removeProperty('overflow');
		}
	}
};

DataTable.prototype.showFilterArea = function() {
	var ref = this;
	ref.isEditing = false;
	ref.config.filter.config.area.show();
	var lateral = document.querySelector('.side.new-box-side');
	if (lateral) {
		lateral.className = lateral.className.replace(/\bhide\b/g, '');
	}
};

DataTable.prototype.HighLightEditing = function() {
	var ref = this;
	if (ref.scrollTop) {
		document.documentElement.scrollTop = ref.scrollTop;
	} else if (ref.linhas && ref.linhas[ref.openedItem]) {
		var top = ref.linhas[ref.openedItem].offsetTop - document.getElementsByClassName('breadcrumb')[0].offsetHeight - document.getElementById('header-list').offsetHeight;
		if (top > window.innerHeight) {
			top -= (window.innerHeight / 2);
		}
		window.scrollTo(0, top);
	}
	if (!ref.openedItem) {
		return;
	}
	var curr = document.querySelector('tr.higlight');
	if (curr) {
		curr.className = curr.className.replace(/\bhiglight-remove|higlight\b/g, '');
	}
	if (typeof(ref.linhas) == 'undefined' || typeof(ref.linhas[ref.openedItem]) == 'undefined' || !ref.linhas[ref.openedItem]) {
		return;
	}
	ref.linhas[ref.openedItem].className += ' higlight';
	ref.timer2 = setTimeout(function() {
		if (!ref.timer) {
			return function() {
				ref.scrollTop = null;
				if (!ref.linhas[ref.openedItem]) {
					return;
				}
				ref.linhas[ref.openedItem].className +=' higlight-remove';
			};
		}
		var openedItem = ref.openedItem;
		clearTimeout(ref.timer2);
		return function() {
			if (!ref.linhas[openedItem]) {
				return;
			}
			ref.linhas[openedItem].className += ' higlight-remove';
		};
	}(), 500);
	ref.timer = setTimeout(function() {
		if (!ref.timer) {
			return function() {
				if (!ref.linhas[ref.openedItem]) {
					return;
				}
				ref.linhas[ref.openedItem].className = ref.linhas[ref.openedItem].className.replace(/\bhiglight-remove|higlight\b/g, '');
				ref.openedItem = null;
			};
		}
		var openedItem = ref.openedItem;
		ref.openedItem = null;
		clearTimeout(ref.timer);
		return function() {
			if (!ref.linhas[openedItem]) {
				return;
			}
			ref.linhas[openedItem].className = ref.linhas[openedItem].className.replace(/\bhiglight-remove|higlight\b/g, '');
		};
	}(), 1000);
};

DataTable.prototype.renderEmpty = function(msg) {
	this.setDefaultFeed();
	this.config.dataTable.innerHTML = '';
	var content = document.createElement('div');
	content.className = 'row';
	content.style['margin-top'] = '45px';
	var exclamation = document.createElement('span');
	exclamation.className = 'fas fa-exclamation-circle';
	exclamation.style['font-size'] = '50pt';
	exclamation.style.color = '#ccc';
	var title = document.createElement('h3');
	title.innerText = this.config.feed.title || 'Nenhum item registrado';
	var message = document.createElement('p');
	message.innerHTML = msg || 'Ainda não existem cadastros no seu sistema, comece agora mesmo';
	message.style['font-size'] = '9pt';
	var mContent = document.createElement('div');
	mContent.className = 'col-xs-4 col-xs-offset-4 exclamation-items form-group';
	mContent.appendChild(exclamation);
	mContent.appendChild(title);
	mContent.appendChild(message);
	content.appendChild(mContent);
	var btnDef = document.querySelector('.new-side-bar .button-default-novo');
	if (btnDef) {
		btnDef.style.display = 'none';
		var textBtn = document.createElement('span');
		textBtn.className = 'text-add';
		textBtn.style['font-size'] = '9pt';
		textBtn.innerText = btnDef.querySelector('span').innerText;
		textBtn.style['margin-right'] = '0px';
		var button = document.createElement('button');
		button.title = textBtn.innerText;
		button.className = 'button-default-novo';
		button.addEventListener('click', function() {
			btnDef.click();
		});
		button.appendChild(textBtn);
		var bContent = document.createElement('div');
		bContent.className = 'col-xs-12 text-center';
		bContent.appendChild(button);
		content.appendChild(bContent);
	}
	this.config.dataTable.appendChild(content);
	this.closeWait();
	if ((typeof actionBar !== 'undefined') && (actionBar instanceof ActionBar) && this.config.actionBar) {
		this.config.actionBar.enableActions(true, true);
	}
};

DataTable.prototype.endInfinity = function(show) {
	if (show) {
		document.querySelector('#pagination li:last-child').className += ' disabled';
		Toast.create({
			type: Toast.W,
			title: 'Atenção',
			msg: 'Sem mais registros para carregar',
			config: {
				closeButton: true,
				timeOut: 8000
			}
		});
	}
	var ref = this;
	if (this.timer) {
		clearTimeout(ref.timer);
	}
	this.closeWait();
};

DataTable.prototype.Feed = function(data) {
	this.config.dataTable.style.opacity = '1';
	if (this.isEditing === undefined) {
		this.isEditing = (window.getComputedStyle(document.getElementById('edicao')).display === 'none');
	}
	if (this.config.filter && !this.isEditing) {
		this.showFilterArea();
	}
	this.lastChecked = null;
	if (Array.isArray(data)) {
		data = { data : data };
	}
	if (!this.config.checkbox.keepSelected) {
		this.selecteds.resetAll();
	}
	if (this.config.filter) {
		this.config.filter.message();
		this.config.filter.displayHeader(false);
		this.config.filter.pending = false;
	}
	if (this.config.infinityScroll && this.config.feed.data && this.config.feed.data.length > 0) {
		if (this.config.feed.data[this.config.feed.data.length - 1][this.config.idField] == data.data[data.data.length-1][this.config.idField]){
			this.endInfinity(false);
			return;
		}
		this.scrollTop += 100;
		this.openedItem = this.config.feed.data[this.config.feed.data.length-1][this.config.idField];
		var classe = this;
		var idcData = this.config.feed.data.length;
		this.config.feed.data = this.config.feed.data.concat(data.data);
		var dataLength = this.config.feed.data.length;
		this.config.feed.paginacao.totalRegistros += data.paginacao.totalRegistros;
		var rows = document.createDocumentFragment();
		for (idcData; idcData < dataLength; idcData++) {
			rows.appendChild(classe.buildItens(idcData));
		}
		classe.tbody.appendChild(rows);
		if (this.selectAll) {
			this.selectAll.checked = (classe.selecteds.pageLength == classe.ckBoxSelects.length);
			classe.insertTotal(classe.config.feed.paginacao.totalRegistros);
		}
		this.HighLightEditing();
		this.closeWait();
		return;
	}
	var btnDef = document.querySelector('.new-side-bar .button-default-novo');
	if (btnDef) {
		btnDef.style.display = 'block';
	}
	if (data.message == 'no-content') {
		this.renderEmpty(data.custom);
		this.insertTotal(0);
		this.isClickPagination = false;
		return;
	}
	if (!data || data.message || !data.data || data.data.message) {
		this.config.feed.paginacao.atual = pagina || 1;
		if (this.config.feed.paginacao.atual > 1) {
			if (!data.paginacao.totalRegistros || this.config.infinityScroll) {
				this.endInfinity(!this.config.infinityScroll);
				this.insertTotal(data.paginacao.totalRegistros);
				this.closeWait();
				return;
			}
			this.config.feed.paginacao.atual = this.config.feed.paginacao.atual -1;
			if (typeof pagina != 'undefined') {
				pagina = this.config.feed.paginacao.atual;
			}
			this.closeWait();
			window[this.config.list]();
			return;
		}
		this.setDefaultFeed();
		var message =  (data.data || {});
		var img = message.img || 'images/resultado-nao-encontrado.svg';
		var imgElement = document.createElement('img');
		imgElement.src = img;
		imgElement.className = 'center-image';
		if (img.indexOf('.svg') == -1) {
			imgElement = document.createElement('span');
			imgElement.className = img;
			imgElement.style['font-size'] = '50pt';
			imgElement.style.color ='#CCC';
		}
		var h3 = document.createElement('h3');
		h3.innerText =   message.title || 'Nenhum resultado encontrado';
		var span = document.createElement('span');
		span.innerHTML =  message.message || 'Nada disponível para a listagem confira acima se você possui filtros aplicados';
		var dCenter = document.createElement('div');
		dCenter.className ='col-xs-12 text-center';
		dCenter.appendChild(document.createElement('br'));
		dCenter.appendChild(imgElement);
		dCenter.appendChild(h3);
		dCenter.appendChild(span);
		var notFound = document.createElement('div');
		notFound.className = 'row busca-nao-encontrada';
		notFound.appendChild(dCenter);
		this.closeWait();
		this.config.dataTable.innerHTML = '';
		this.config.dataTable.appendChild(notFound);
		this.insertTotal(0);
		if (this.config.actionBar && !this.selecteds.length) {
			this.config.actionBar.enableActions(true, true);
		}
		return;
	}
	this.config.feed = data;
	this.table = document.createElement('table');
	this.table.className = 'tabela-listagem';
	this.contextMenu = null;
	if (typeof permissionObj !== 'undefined' && permissionObj instanceof Permission) {
		this.config.feed.permissions = permissionObj.getAll();
	}
	if (this.config.contextMenu) {
		if (typeof this.config.contextMenu == 'function') {
			this.config.contextMenu = this.config.contextMenu(this.config.feed.permissions);
		}
		if (this.config.contextMenu.menus.length > 0) {
			this.contextMenu = new MenuContext({
				debug: this.config.debug,
				data: this.config.contextMenu,
				datatable: this
			});
		}
	}
	this.tbody = document.createElement('tbody');
	this.config.dataTable.innerHTML = '';
	var table = document.createElement('table');
	table.className = 'tabela-listagem';
	table.appendChild(this.buildHeader());
	table.appendChild(this.tbody);
	this.config.dataTable.appendChild(table);
	this.buildRows();
	this.buildPagination(this.config.dataTable);
	this.insertTotal(data.paginacao.totalRegistros);
	this.HighLightEditing();
	this.closeWait();
	if (this.config.actionBar && !this.selecteds.length) {
		this.config.actionBar.enableActions(true, true);
	}
	this.isListed = true;
		if (BrowserDetect.browser == 'Chrome' && BrowserDetect.version < 56) {
		var elements = document.querySelectorAll('#datatable table thead tr th, #header-list');
		for (var i = elements.length - 1; i >= 0; i--) {
			elements[i].addClass('datatable-header-chrome-fix');
		}
	}
};

DataTable.prototype.setDefaultFeed = function() {
	this.config.feed.paginacao = {
		atual : pagina,
		totalRegistros : 0,
		registrosPagina : 0
	};
};

DataTable.prototype.insertTotal = function(total) {
	if ((total === undefined || total === null) && this.config.feed.data && this.config.feed.data.length) {
		total = this.config.feed.data.length;
	}
	var updateTotal = function() {
		var dTotal = document.getElementById('total-list-data');
		if (dTotal) {
			dTotal.innerText = total;
		}
	};
	if (typeof actionBar != 'undefined') {
		actionBar.loaded.then(updateTotal);
	} else {
		updateTotal();
	}
};

DataTable.prototype.buildCheckBox = function(input, action) {
	input.type = 'checkbox';
	input.name = input.id;
	var label = document.createElement('label');
	label.setAttribute('for',input.id);
	label.addEventListener('click', action);
	var contents = document.createDocumentFragment();
	contents.appendChild(input);
	contents.appendChild(label);
	var div = document.createElement('div');
	div.className = 'input-checkbox';
	div.appendChild(contents);
	return div;
};

DataTable.prototype.hasPermission = function (permissions, data) {
	if (permissions == undefined) {
		return true;
	}
	if (!Array.isArray(permissions)) {
		permissions = [permissions];
	}
	var length = permissions.length;
	for (var i = 0; i < length; i++) {
		if (typeof permissions[i] == 'string') {
			if (!this.config.feed.permissions[permissions[i]]) {
				return false;
			}
			continue;
		}
		if (!permissions[i](data)) {
			return false;
		}
	}
	return true;
};

DataTable.prototype.changeCheck = function(id, checked) {
	if (checked) {
		this.selecteds.add(id);
		return;
	}
	this.selecteds.remove(id, true);
};

DataTable.prototype.buildRows = function() {
	this.rDatas = {};
	this.ckBoxSelects = {
		each: function (fnCallback) {
			if (!this.first) {
				return;
			}
			var sec = 5000;
			var index = this.first;
			var element = this.itens[this.first];
			while (element && sec > 0) {
				sec--;
				if (fnCallback(index, element.item) === false) {
					return;
				}
				index = element.next;
				element = this.itens[element.next];
			}
		},
		length: 0,
		disableds: 0,
		itens: {},
		first: null,
		get: function(index) {
			if (this.itens[index]) {
				return this.itens[index].item;
			}
		},
		set: function(index, value) {
			this.length++;
			this.first = index;
			this.last = index;
			this.itens[index] = {
				item: value
			};
			this.set = function(index, value) {
				this.length++;
				this.itens[index] = {
					item: value,
					prev: this.last
				};
				this.itens[this.last].next = index;
				this.last = index;
			};
		}
	};
	this.selecteds.pageLength = 0;
	this.linhas = {};
	var dataLength = this.config.feed.data.length;
	var classe = this;
	var idcData = 0;
	var rows = document.createDocumentFragment();
	for (idcData; idcData < dataLength ; idcData++) {
		rows.appendChild(classe.buildItens(idcData));
	}
	classe.tbody.appendChild(rows);
	if (this.selectAll) {
		this.selectAll.checked = (classe.selecteds.pageLength == classe.ckBoxSelects.length);
	}
};

DataTable.prototype.buildItens = function(idcData) {
	var classe = this;
	this.data = this.config.feed.data[idcData];
	var row = document.createElement('tr');
	var col = document.createDocumentFragment();
	if (classe.config.line.pipe) {
		var attrsL = classe.config.line.pipe.apply(this, row);
		if (attrsL) {
			for (var attrL in attrsL) {
				row.setAttribute(attrL, attrsL[attrL]);
			}
		}
	}
	this.rDatas[this.data[this.config.idField]] = this.data;
	this.currIdc = idcData;
	if (this.config.line.onClick) {
		row.addEventListener('click', function() {
			var id = classe.data[classe.config.idField];
			return function(event) {
				if (classe.noClick) {
					classe.noClick = false;
					return;
				}
				if (event.ctrlKey) {
					window.open('#edit/'+id);
					return;
				}
				classe.scrollTop = document.documentElement.scrollTop;
				classe.isEditing = true;
				classe.openedItem = id;
				classe.config.line.onClick(id);
			};
		}());
	} else {
		row.className = 'remove-hover';
	}
	this.linhas[this.data[this.config.idField]] = row;
	var tmpVal = this.data[this.config.idField];
	if (this.config.checkbox.visible) {
		var chkBox = document.createElement('input');
			chkBox.id = 'marcado' + this.config.dataTable.id + tmpVal;
			chkBox.setAttribute('value', tmpVal);
			chkBox.className = 'tcheck';
		if (this.data[this.config.idField]) {
			this.ckBoxSelects.set(this.data[this.config.idField], chkBox);
		}
		if (this.selecteds.itens[this.data[this.config.idField]]) {
			classe.selecteds.pageLength++;
			chkBox.checked = true;
			row.className = row.className + ' selected';
		}
		if (classe.config.checkbox && classe.config.checkbox.pipe) {
			attrs = classe.config.checkbox.pipe.apply(this, $(chkBox));
			if (undefined != attrs) {
				for (var attr in attrs) {
					chkBox.setAttribute(attr, attrs[attr]);
				}
			}
		}
		var tdCkb  = document.createElement('td');
			tdCkb.style.position = 'relative';
			tdCkb.className = 'checkbox-item';
			tdCkb.appendChild(this.buildCheckBox(chkBox,function() {
				var checkbox = chkBox;
				var fnRemoveSelection = function(){};
				if (window.getSelection) {
					fnRemoveSelection = function() { window.getSelection().removeAllRanges(); };
				}
				else if (document.selection) {
					fnRemoveSelection = function() { document.selection.empty(); };
				}
				return function(e) {
					fnRemoveSelection();
					classe.selectItem(checkbox, checkbox.value, e);
				};
			}()));
			tdCkb.addEventListener('click', function(event) {
				event.stopPropagation();
			});
		col.appendChild(tdCkb);
	}
	for (var idcFields = 0,fLength = this.config.fields.length; idcFields < fLength; idcFields ++) {
		this.currField = this.config.fields[idcFields];
		if (!this.currField.alwaysRender) {
			if (!this.hasPermission(this.currField.permissions, this.data) || !this.viewHasField(this.currField.prop)) {
				continue;
			}
		}
		var data = this.config.feed.data[idcData][this.currField.prop];
		if (!this.currField.alwaysRender) {
			if (this.currField.prop && data === undefined) {
				continue;
			}
		}
		var label = this.currField.label;
		if (label) {
			if (typeof label == 'function') {
				label = label();
			}
			label += ':';
		}
		var spanTitle = document.createElement('span');
			spanTitle.className = 'visible-xs table-label';
			spanTitle.innerHTML = label;
		var td = document.createElement('td');
			td.appendChild(spanTitle);
		var spanContent = document.createElement('span');
		if (this.currField.pipe) {
			var params = [];
			params.push(data);
			var paramsLength = this.currField.pipe.params.length;
			for (var i = 0 ; i < paramsLength; i++) {
				params.push(this.currField.pipe.params[i]);
			}
			data = this.currField.pipe.name.apply(this, params) || '';
			if (typeof data == 'string' || typeof data == 'number' ) {
				spanContent.textContent = data;
			} else {
				spanContent.appendChild(data);
			}
		} else {
			spanContent.textContent = data || '';
		}
		td.appendChild(spanContent);
		var attributes = this.currField.attributes || {};
		if (typeof attributes == 'function') {
			attributes = attributes.call(this, data);
		}
		for (var attrI in attributes) {
			td.setAttribute(attrI, attributes[attrI]);
		}
		if (!data) {
			td.className += ' hidden-xs';
		}
		if (this.config.line.onClick && this.currField.disableClick) {
			td.addEventListener('click', function() {
				classe.noClick = true;
			});
		}
		col.appendChild(td);
	}
	if (this.contextMenu) {
		var context = this.contextMenu.build(this.config.feed.data[idcData]);
		var tdMenu = document.createElement('td');
		tdMenu.className = 'context-menu-item';
		if (context) {
			tdMenu.appendChild(context);
			tdMenu.addEventListener('click', function(event) {
				classe.noClick = true;
			});
		}
		col.appendChild(tdMenu);
	}
	row.appendChild(col);
	return row;
};

DataTable.prototype.displayWait = function() {
	displayWait('wait', true, this.config.messageWait);
};

DataTable.prototype.closeWait = function() {
	closeWait('wait');
	this.config.dataTable.opacity = '1';
};

DataTable.prototype.itemPagination = function(item, link) {
	var that = this;
	var li = this.createElement('li', function() {
		if (!Array.isArray(item)) {
			item = [{ text: item }];
		}
		var spans = document.createDocumentFragment();
		var normal = item[0];
		var spanNormal = document.createElement('span');
		spanNormal.className = 'hidden-xs hidden-sm ' + (normal.class || '');
		spanNormal.textContent = (normal.text || '');
		spans.appendChild(spanNormal);
		var mobile = item[1];
		if (mobile) {
			var spanMobile = document.createElement('span');
			spanMobile.className = 'visible-xs visible-sm '+ (mobile.class || '');
			spanMobile.textContent = (mobile.text || '' );
			spans.appendChild(spanMobile);
		}
		var span = that.createElement('span', spans);
		span.setAttribute('aria-hidden', true);
		span.className = 'border-right';
		return span;
	}());
	if (link == this.config.feed.paginacao.atual || !link) {
		li.className = 'disabled';
		return li;
	}
	li.addEventListener('click', function() {
		if (that.config.feed.paginacao.atual == link || (this.className && this.className.indexOf('disabled') != -1)) {
			return;
		}
		that.config.feed.paginacao.atual = link;
		if (that.config.feed.paginacao.totalRegistros) {
			that.paginacao.innerHTML = '';
			that.paginacao.appendChild(that.pagination());
		}
		pagina = link;
		window[that.config.list]();
		if (!that.config.infinityScroll) {
			document.documentElement.scrollTop = 0;
		}
	});
	return li;
};

DataTable.prototype.updateData = function (data) {
	if (!this.rDatas[data[this.config.idField]]) {
		return;
	}
	for (var prop in data) {
		this.rDatas[data[this.config.idField]][prop] = data[prop];
	}
	var dropMenu = this.linhas[data[this.config.idField]].querySelector('.dropdown-menu');
	if (dropMenu) {
		dropMenu.innerHTML = '';
	}
};

DataTable.prototype.createElement = function(el, innerHTML) {
	el = document.createElement(el);
	el.appendChild(innerHTML);
	return el;
};

DataTable.prototype.pagination = function() {
	var paginacao = this.config.feed.paginacao;
	paginacao.atual = paginacao.atual || (pagina || 1);
	if (!paginacao.registrosPagina) {
		this.hasPagination = false;
		return document.createTextNode('');
	}
	var registrosPorPagina = document.getElementById('registrosPorPagina');
	if (registrosPorPagina) {
		registrosPorPagina.value = paginacao.registrosPagina;
	}
	totalPaginas = null;
	if (paginacao.totalRegistros) {
		totalPaginas = paginacao.totalRegistros / paginacao.registrosPagina;
		if (Math.floor(totalPaginas) != totalPaginas) {
			totalPaginas = Math.floor(totalPaginas) + 1;
		}
		if (totalPaginas == 1) {
			this.hasPagination = false;
			return;
		}
	}
	this.hasPagination = true;
	var paginas = document.createDocumentFragment();
	paginas.appendChild(
		this.itemPagination([{ text: 'Primeira'}, { class: 'fas fa-angle-double-left' }], 1)
	);
	paginas.appendChild(
		this.itemPagination([{ text: 'Anterior'}, { class: 'fas fa-angle-left' }], paginacao.atual - 1)
	);
	if (totalPaginas) {
		var that = this;
		paginas.appendChild(
			this.createElement('li',
				function() {
					var span = that.createElement('span', function() {
					var select = that.createElement('select', function() {
						var options = document.createDocumentFragment();
						for (var i = totalPaginas; i>=1; i--) {
							var option = document.createElement('option');
							option.textContent = i;
							option.setAttribute('value', i);
							if (i == paginacao.atual) {
								option.setAttribute('selected', true);
							}
							options.appendChild(option);
						}
						return options;
					}());
					select.className = 'form-control item-form';
					select.addEventListener('change', function() {
						that.config.feed.paginacao.atual = parseInt(this.value);
						that.paginacao.innerHTML = '';
						var pags = that.pagination();
						that.paginacao.appendChild(pags);
						pagina = that.config.feed.paginacao.atual;
						window[that.config.list]();
						document.documentElement.scrollTop = 0;
					});
					return select;
				}());
				span.setAttribute('aria-hidden','true');
				span.className = 'drop-page';
				return span;
			}())
		);
	}
	var proxima = this.itemPagination([ { text :'Próxima'}, { class:'fas fa-angle-right' } ], paginacao.atual +1);
	paginas.appendChild(proxima);
	if (!totalPaginas) {
		if (paginacao.registrosPagina != this.config.feed.data.length ) {
			proxima.className = proxima.className + ' disabled';
		}
		return paginas;
	} else if (paginacao.atual == totalPaginas){
		proxima.className = proxima.className + ' disabled';
	}
	paginas.appendChild(
		this.itemPagination([ { text :'Última'}, { class:'fas fa-angle-double-right' } ], totalPaginas)
	);
	var total = this.itemPagination(
		((paginacao.atual * paginacao.registrosPagina) - paginacao.registrosPagina + 1) +
		' - ' +
		(paginacao.atual == totalPaginas ? paginacao.totalRegistros : (paginacao.atual * paginacao.registrosPagina)) +
		' de ' +
		paginacao.totalRegistros
	);
	total.className += ' hidden-xs hidden-sm';
	paginas.appendChild(total);
	return paginas;
};

DataTable.prototype.paginationInfinity = function() {
	var cls = this;
	var li = document.createElement('li');
	li.innerHTML = '<span class="is-infinity">Carregar Mais</span>';
	li.addEventListener('click', function() {
		if (this.className == 'disabled') {
			return;
		}
		cls.scrollTop = document.documentElement.scrollTop;
		pagina++;
		window[cls.config.list](true);
	});
	return li;
};

DataTable.prototype.alterView = function(view) {
	if (!this.config.views || !this.config.views[view]) {
		return;
	}
	this.header = null;
	this.currView = view;
};

DataTable.prototype.viewHasField = function(field) {
	if (!this.config.views) {
		return true;
	}
	return this.config.views[this.currView].indexOf(field) != -1;
};

DataTable.prototype.getMarker = function(idx, title, attrs, returnAsElement) {
	returnAsElement = returnAsElement || true;
	var markers = {
		notaSync: { class: 'bli bling-dollar-purple', title: '' },
		rastreamentoSincronizado: { class: 'bli bling-asterisk-deepblue', title: 'Rastreamento sincronizado com a loja virtual' },
		cfOrigemNota: { class: 'bli bling-cf-blue', title: 'Cupom fiscal gerado pela NF' },
		cfSemOrigem: { class: 'bli bling-cf-darkblue', title: 'Cupom fiscal gerado pela NF' },
		contaPaga: { class: 'bli bling-c-lavender', title: 'Conta a receber paga' },
		origemPDV: { class: 'bli bling-b-blue', title: 'Pedido lançado através de venda em balcão' },
		origemFrenteCaixa: { class: 'bli bling-fc-blue', title: 'Pedido lançado através do frente de caixa' },
		origemVendas: { class: 'bli bling-v-orange', title: 'Pedido de venda' },
		origemPedidoCompra: { class: 'bli bling-c-yellow', title: 'Origem pedido de compra' },
		origemNF: { class: 'bli bling-c-yellow', title: '' },
		origemNFCe: { class: 'bli bling-c-yellow', title: '' },
		origemOS: { class: 'bli bling-o-midgreen', title: 'Origem ordem de serviço' },
		origemCobranca: { class: 'bli bling-c-lavender', title: 'Origem cobrança' },
		origemPagamento: { class: 'bli bling-p-deepred', title: 'Pagamento' },
		origemRecebimento: {class: 'bli bling-r-green', title: 'Recebimento'},
		origemProjeto: { class: 'bli bling-p-deepred', title: 'Origem projeto' },
		origemDuplicata: { class: 'bli bling-r-cherry', title: 'Origem duplicata' },
		origemApi: { src: 'imagens/tela-lojas-virtuais/icons/api.svg', title: this.title },
		origemOP: { src: 'images/ordens_producao.svg', title: 'Origem ordem de produção' },
		hasNFe: { class: 'bli bling-n-darkred', title: 'Nota fiscal lançada' },
		hasNFCe: { class: 'bli bling-n-darkgreen', title: 'Nota fiscal de consumidor lançada' },
		hasNFSe: { class: 'bli bling-n-deepgreen', title: 'Nota fiscal de serviço lançada' },
		hasContas: { class: 'bli bling-c-green', title: 'Contas lançadas' },
		hasOS: { class: 'bli bling-o-midgreen', title: 'Ordem serviço lançada' },
		hasStock: { class: 'bli bling-e-darkblue', title: 'Estoque lançado' },
		hasStockSemOrigemRef: { class: 'bli bling-e-blue', title: 'Estoque lançado' },
		hasCfe: { class: 'bli bling-cfe-blue', title: 'CF-e emitido' },
		hasCF: { class: 'bli bling-cf-blue', title: 'Cupom fiscal emitido' },
		hasDoc: { class: 'bli bling-enviado', title: 'Fatura enviada' },
		hasComment: { class: 'far fa-comment-alt', title: 'Possui observação' },
		hasError: { class: 'bli bling-e-red', title: 'Possui erros' },
		hasLancamentoDuplicata: { class: 'bli bling-c-midgreen', title: 'Conta lançada pela NF' },
		hasLancamentoCobranca: { class: 'bli bling-c-midgreen', title: 'Conta lançada pela cobrança' },
		hasProposta: { class: 'bli bling-p-deepred', title: 'Clique aqui para visualizar a proposta' },
		hasEnderecoDiferente: { class: 'fas fa-map-marker-alt', title: 'Pedido com endereço de entrega diferente.' },
		hasEstoqueOrdemServico: { class: 'bli bling-e-darkblue', title: 'Estoque lançado pela Ordem de serviço' },
		hasBoletoEnviado: { class: 'bli bling-b-blue', title: 'Boleto enviado' },
		hasPendencia: { class:'fas fa-exclamation-triangle', title:'Este Pedido contém Pendências' },
		hasPrecosAtualizados: { class: 'bli bling-p-deepred', title: 'Preços atualizados' },
		enviadoDadosNota: { class: 'bli bling-dollar-purple',title: 'Dados da nota sincronizados com a loja virtual' },
		enviadoProposta: { class: 'bli bling-e-blue', title: 'Enviado' },
		enviadoRastreamento: { class: 'bli bling-asterisk-deepblue',title: 'Rastreamento sincronizado com a loja virtual' },
		tentativaGerarNota: { class: 'bli bling-n-deepgreen', title: 'Tentativa de geração de nota' },
		erroEnvioBoleto: { class: 'bli bling-b-blue ban', title: 'Não foi possível enviar o boleto' },
		naoEnviado: { class: 'bli bling-n-deepgreen', title: 'Não enviado' },
		acessado: { class: 'bli bling-a-lavender', title: 'Acessado' },
		cobrancaCancelada: { class: 'bli bling-c-green err', title: 'Conta a receber cancelada' },
		status: { class: 'fas fa-circle' },
		ocorrencia: { class: 'far fa-clock' },
		excluido: { class: 'fas fa-times', title: 'Item Excluído' },
		envioAutomatico: { class: 'bli bling-agendado-envio', title: 'Envio automático do boleto' },
		erroBoleto: { class: 'fas fa-exclamation-triangle', title: 'Erros no boleto' },
		contaRecorrente: { class: 'fas fa-retweet', title: 'Conta recorrente' },
		hasAnexo: { class: 'fas fa-paperclip', title: 'Possui anexos' },
		excluir: { class: 'fas fa-trash-alt', title: 'Excluir' },
		categoriaXML: { src: 'images/xml-icone.svg', title: 'XML' },
		categoriaRelatorio: { src: 'images/relatorio-icone.svg', title: 'Relatório' },
		categoriaOutros: { src: 'images/outros-icone.svg', title: 'Outros' }
	};
	if (returnAsElement && markers[idx]) {
		var attributes = {
			title: title || markers[idx].title
		};
		var elementType = 'img';
		if (markers[idx].src) {
			attributes.src = markers[idx].src;
		} else {
			elementType = 'span';
			attributes.class = markers[idx].class;
		}
		if (attrs) {
			for (var atr in attrs) {
				if (attrs[atr]) {
					attributes[atr] = attrs[atr];
				}
			}
		}
		var element = document.createElement(elementType);
		for (var atr in attributes) {
			element.setAttribute(atr, attributes[atr]);
		}
		return element;
	} else if (returnAsElement && !markers[idx]) {
		var el = 'span';
		if (attrs && attrs.src) {
			el = 'img';
		}
		el = document.createElement(el);
		if (attrs) {
			for (var atr in attrs) {
				el.setAttribute(atr, attrs[atr]);
			}
		}
		return el;
	}
	return markers[idx] || false;
};
