function ActionBar(config) {
	this.constructor(config);
}
ActionBar.prototype.constructor = function(config) {
	var deferredObj = $.Deferred();
	var classe = this;
	config = config || {};
	this.mainObj = config.mainObj || document.getElementsByClassName('new-side-bar')[0];
	if (!this.mainObj) {
		return false;
	}
	this.loaded = deferredObj;
	this.type = config.type || 'registros';
	this.objBar = config.objBar || document.querySelector('.new-box-side');
	this.mainActions = config.mainActions || document.getElementsByClassName('main-actions')[0];
	this.mainInfoBar = config.mainInfoBar || document.getElementsByClassName('main-info-bar')[0];
	this.helpIcons = config.helpIcons || [];
	this.minimizedWidth = config.minimizedWidth || 35;
	this.defaultWidth = config.defaultWidth || 210;
	this.isMinimized = false;
	this.scrollClass = config.scrollClass || 'side-bar-overflow';
	this.moreActions = config.moreActions || false;
	this.commonActions = config.commonActions || false;
	this.externalLinks = config.externalLinks || false;
	this.fnAfterChange = config.fnAfterChange || false;
	this.disableMinimize = config.disableMinimize || false;
	this.disableInfoTotal = config.disableInfoTotal || false;
	if (!config.fnGetActions && typeof xajax_obterAcoes == 'function') {
		config.fnGetActions = xajax_obterAcoes;
	}
	if (typeof config.loadInfoBar !== 'undefined') {
		this.loadInfoBar = config.loadInfoBar;
	}
	this.storageName = '__bling-action-bar';
	this.currState = this.getCurrentState();
	this.mainObj.addClass(this.scrollClass);
	this.fnGetActions = config.fnGetActions;
	this.permissions = config.permissions || {};
	this.resize();
	var ctaDiv = document.createElement('div');
	ctaDiv.className = 'new-main-div';
	this.cta = document.querySelectorAll('.new-side-bar .button-default-novo') || document.querySelectorAll('.new-side-bar #file-uploader');
	if (this.cta.length) {
		for (var i =0, tot = this.cta.length; i < tot; i++) {
			ctaDiv.appendChild(this.cta[i]);
		}
	}
	this.mainObj.insertBefore(ctaDiv, this.mainObj.firstChild);
	var divMinimize = document.createElement('div');
	divMinimize.className = 'new-side-bar-minimize';
	var chevronMinimizar = document.createElement('span');
	chevronMinimizar.title = 'Minimizar barra de ações';
	chevronMinimizar.className = 'fas fa-chevron-right';
	divMinimize.appendChild(chevronMinimizar);
	this.mainObj.appendChild(divMinimize);
	this.objBar.addClass('hide');
	this.chevronTrigger = divMinimize;
	this.chevronIcon = chevronMinimizar;
	if (this.disableMinimize || isMobile.any()) {
		divMinimize.addClass('hide');
	}
	this.chevronTrigger.addEventListener('click', function(e) {
		classe.chevronTrigger.hidden = true;
		classe.toggle(document.getElementsByClassName('new-box-side-minimized').length ? 'maximize' : 'minimize');
	});
	this.buildActionList()
	.done(function() {
		var moreActions = document.querySelectorAll('.more-actions li');
		for (var i = 0; i < moreActions.length; i++) {
			moreActions[i].addEventListener('click', function(e) {
				var element = moreActions[i];
				return function(e) {
					if (element.hasClass('block')) {
						return;
					}
					var method = element.getAttribute('data-function');
					if (typeof method === undefined) {
						var firstClass = element.className.split(' ')[0];
						var evt = new MouseEvent('click', {
							bubbles: true,
							cancelable: true,
							view: window
						});
						document.getElementsByClassName(firstClass)[0].dispatchEvent(evt);
					} else if (typeof(element['executeAction']) === 'function') {
						element['executeAction']();
					} else {
						var argument = element.getAttribute('data-arguments');
						if (method) {
							window[method](argument);
						}
					}
				};
			}());
		}
		if (classe.loadInfoBar) {
			classe.loadInfoBar();
		}
		classe.fnRemoveActions();
		deferredObj.resolve();
	});
	if (this.currState == 'minimize' && !isMobile.any()) {
		this.toggle(this.currState);
	}
	this.addBorders();
	return deferredObj.promise();
};

ActionBar.prototype.change = function() {
	var ref = this;
	var chevIconTitle = ref.isMinimized ? 'Maximizar barra de ações' : 'Minimizar barra de ações';
	var width = ref.isMinimized ? ref.minimizedWidth : ref.defaultWidth;
	$(ref.objBar).animate({ width: width + 'px' }, 'fast', function() {
		var paddingR = parseFloat(getComputedStyle(ref.objBar, null).width.replace('px', '')) + 20;
		if (!$('#lista:visible').length) {
			paddingR = 250;
		}
		document.getElementById('container').style['padding-right'] = paddingR + 'px';
		$(ref.chevronIcon).toggleClass('fa-chevron-right fa-chevron-left');
		$(ref.objBar).toggleClass('new-box-side-minimized');
		ref.chevronTrigger.style.display = 'block';
		ref.chevronTrigger.children[0].setAttribute('title', chevIconTitle);
		if (ref.fnAfterChange) {
			ref.fnAfterChange();
		}
	});
};

ActionBar.prototype.resize = function() {
	var footerContainer = document.getElementById('footer-container');
	if (footerContainer) {
		var footerHeight = parseInt(window.getComputedStyle(footerContainer).height.replace('px', ''));
		var objBarHeight = parseInt(this.objBar.style.height.replace('px', ''));
		this.objBar.style.height = (objBarHeight - footerHeight).toString + 'px';
	}
};

ActionBar.prototype.addBorders = function() {
	if (this.mainActions) {
		var elements = this.mainActions.querySelectorAll('button');
		var length = elements.length;
		for (var i = 0; i < length; i++) {
			var divBorder = document.createElement('div');
			divBorder.className = 'border-bottom';
			elements[i].parentNode.insertBefore(divBorder, elements[i].nextSibling);
		}
	}
};

ActionBar.prototype.toggle = function(state) {
	if (this.disabled) {
		return;
	}
	state = state || 'maximize';
	this.isMinimized = state == 'minimize';
	var hideElements = document.getElementsByClassName('hide-on-minimize');
	for (var i = 0, countHide = hideElements.length; i < countHide; i++) {
		hideElements[i].hidden = this.isMinimized;
	}
	var showElements = document.getElementsByClassName('show-on-minimize');
	for (var k = 0, countShow = showElements.length; k < countShow; k++) {
		showElements[k].hidden = !this.isMinimized;
	}
	this.mainObj.addClass(this.scrollClass);
	this.setCurrentState(state);
	this.change();
};

ActionBar.prototype.getKey = function() {
	return document.title.toLowerCase().split(/[ ,]+/).filter(function(idx) {
		return ['bling', '-', ''].indexOf(idx) == -1 && !(/\d/.test(idx));
	}).join('-');
};

ActionBar.prototype.setCurrentState = function(state, key) {
	if (!storageAvailable('localStorage')) {
		return;
	}
	var storage = window.localStorage;
	state = state || 'maximize';
	var result = storage.getItem(this.storageName) || [];
	key = key || this.getKey();
	if (result.length) {
		result = JSON.parse(result);
		if (result) {
			result = result.filter(function(element) {
				return element.interface != key;
			});
		}
	}
	result.push({
		interface: key,
		state: state
	});
	storage.setItem(this.storageName, JSON.stringify(result));
};

ActionBar.prototype.getCurrentState = function(key) {
	if (!storageAvailable('localStorage')) {
		return;
	}
	var storage = window.localStorage.getItem(this.storageName);
	var state = 'maximize';
	if (storage) {
		key = key || this.getKey();
		var result = JSON.parse(storage);
		if (result) {
			result = result.filter(function(element) {
				return element.interface == key;
			});
			if (result[0]) {
				state = result[0].state;
			}
		}
	}
	return state;
};

ActionBar.prototype.minimizedInfo = function () {
	if (!this.loadInfoBar) {
		this.sideBarInfo.hidden = true;
		return;
	}
	var ref = this;
	var totaisDiv = document.createElement('div');
	totaisDiv.className = 'totais';
	var spanInformacoes = document.createElement('span');
	spanInformacoes.className = 'info-text';
	spanInformacoes.textContent = 'Informações';
	totaisDiv.appendChild(spanInformacoes);
	var spanInfoLabel = document.createElement('span');
	spanInfoLabel.className = 'info-label';
	spanInfoLabel.textContent = 'Quantidade de ' + this.type;
	totaisDiv.appendChild(spanInfoLabel);
	var divInfoValue = document.createElement('div');
	divInfoValue.className = 'info-value';
	divInfoValue.textContent = document.getElementById('total-list-data').innerText;
	var divTotal = document.createElement('div');
	divTotal.appendChild(totaisDiv);
	$(this.popoverInfo).attr('data-content', $(divTotal).html()).on('inserted.bs.popover', function() {
		if (ref.isMinimized) {
			$('.popover-content .info-value').text(document.getElementById('total-list-data').textContent);
		}
	});
};

ActionBar.prototype.loadInfoBar = function() {
	var mainInfo = document.createElement('div');
	mainInfo.id = 'main-info';
	mainInfo.className = 'new-side-bar-info hide-on-minimize';
	if (!this.disableInfoTotal) {
		mainInfo.appendChild(this.buildInfoTotal());
	}
	this.mainObj.appendChild(mainInfo);
	if (this.externalLinks) {
		this.renderExternalLinks();
	}
};

ActionBar.prototype.buildInfoTotal =  function() {
	var fragment = document.createDocumentFragment();
	var infoContainer = document.createElement('div');
	infoContainer.className = 'totais';
	var informacoes = document.createElement('span');
	informacoes.textContent = 'Informações';
	informacoes.className = 'info-text';
	infoContainer.appendChild(informacoes);
	var qtdItensLabel = document.createElement('span');
	qtdItensLabel.className = 'info-label';
	qtdItensLabel.textContent = 'Quantidade de ' + this.type;
	infoContainer.appendChild(qtdItensLabel);
	var qtdItens = document.createElement('div');
	qtdItens.id = 'total-list-data';
	qtdItens.className = 'info-value';
	infoContainer.appendChild(qtdItens);
	var valorTotalContainer = document.createElement('div');
	valorTotalContainer.id = 'valor-total-lista';
	valorTotalContainer.style.display = 'none';
	infoContainer.appendChild(valorTotalContainer);
	var valorTotalLabel = document.createElement('span');
	valorTotalLabel.className = 'info-label';
	valorTotalLabel.textContent = 'Valor total';
	valorTotalContainer.appendChild(valorTotalLabel);
	var valorTotal = document.createElement('div');
	valorTotal.className = 'info-value';
	valorTotal.textContent = '';
	valorTotalContainer.appendChild(valorTotal);
	fragment.appendChild(infoContainer);
	var selecionadosContainer = document.createElement('div');
	selecionadosContainer.className = 'hide-on-minimize';
	selecionadosContainer.id = 'selecionados';
	fragment.appendChild(selecionadosContainer);
	return fragment;
};

ActionBar.prototype.updateInfoBar = function(type) {
	this.type = type || this.type;
	var infoContainer = document.createElement('div');
	infoContainer.appendChild(this.buildInfoTotal());
	document.getElementById('main-info').innerHTML = infoContainer.innerHTML;
};

ActionBar.prototype.addInfo = function(element, selector) {
	if (element instanceof jQuery) {
		if (selector) {
			$(selector).remove();
		}
		element = element.get(0);
	} else {
		if (selector) {
			var el = document.querySelector(selector);
			if (el) {
				el.parentElement.removeChild(el);
			}
		}
	}
	this.mainObj.appendChild(element);
};

ActionBar.prototype.getIcon = function(type) {
	var icons =
	{
		'help': 'fas fa-question-circle',
		'preferencias': 'fas fa-cog',
		'tour': 'fas fa-eye'
	};
	return icons[type] ? icons[type] : '';
};

ActionBar.prototype.loadHelpBar = function() {
	var ref = this;
	$.ajax({
		type: 'POST',
		url: 'utils/requestMethods.php',
		dataType: 'json',
		data: {
			action: 'getRelease'
		},
	})
	.done(function(response) {
		if (response) {
			ref.helpIcons.push({
				title: 'Confira as novidades da versão',
				href: 'releases.php',
				class: 'fas fa-server' + (response.alert ? ' green' : '')
			});
		}
	})
	.always(function(response) {
		var helpIcons = ref.helpIcons;
		if (helpIcons) {
			var lastKey = helpIcons.length;
			var newSideHelp = document.createElement('div');
			newSideHelp.className = 'new-side-bar-help';
			ref.mainObj.appendChild(newSideHelp);
			for (var i = 0; i < helpIcons.length; i++) {
				var that = helpIcons[i];
				var isValid = false;
				if (that.type) {
					that.class = ref.getIcon(that.type);
				}
				if (Array.isArray(that.href)) {
					for (var j = 0; j < that.href.length; j++) {
						var ico = that.href[j];
						if (this.sistema != response.sistema) {
							delete ico;
							return;
						}
						isValid = true;
						that.href = ico.href;
					}
				} else {
					if (that.type == 'help' && response.sistema != 'Bling') {
						delete that;
						return;
					} else {
						isValid = true;
					}
				}
				if (!isValid || (this['data-system-permission'] !== undefined && !response.isAdmin)) {
					delete this;
					return;
				}
				this.class += (lastKey - 1 > index) ? ' margin_right10' : '';
				if (!this.target) {
					this.target = '_blank';
					if (this.function) {
						this.target = '#';
					}
				}
				var element = document.createElement('a');
				element.setAttribute('target', this.target);
				element.title =  this.title;
				element.href = this.href;
				var span = document.createElement('span');
				span.className = this.class;
				element.appendChild(span);
				if (this.function) {
					element.addEventListener('click', this.function);
				}
				children = ref.mainObj.querySelectorAll('.new-side-bar-help');
				for (var k = 0; k < children.length.length; k++) {
					children[k].appendChild(element);
				}
			}
		}
	});
};

ActionBar.prototype.checkPermissions = function () {
	var deferred = $.Deferred();
	var ref = this;
	if (typeof permissionObj !== 'undefined' && permissionObj instanceof Permission) {
		ref.permissions = permissionObj.getAll();
		deferred.resolve();
	} else if (typeof this.fnGetActions === 'function') {
		this.fnGetActions(function(data) {
			ref.permissions = data;
			deferred.resolve();
		});
	} else {
		deferred.resolve();
	}
	return deferred.promise();
};

ActionBar.prototype.buildActionList = function() {
	var ref = this;
	var deferred = $.Deferred();
	this.checkPermissions()
	.done(function() {
		var moreActions = ref.moreActions;
		var processProperties = function(item) {
			if (item.permission && !ref.permissions[item.permission]) {
				return false;
			}
			var itemClass = item.class || '';
			if (item.disabled) {
				itemClass += ' active-when-selected block';
			}
			itemClass += ' action-item';
			var optionProps = {
				text: item.text,
				title: item.text,
				class: itemClass
			};
			if (item.function) {
				optionProps['data-function'] = item.function;
			}
			if (item.id) {
				optionProps.id = id;
			}
			if (item.arguments) {
				optionProps['data-arguments'] = item.arguments;
			}
			if (item.permission) {
				optionProps['data-system-permission'] = item.permission;
			}
			return optionProps;
		};
		if (moreActions) {
			var isVisible = ref.getCurrentState('__default_state') == 'visible';
			var initialClass = 'fas open-more-actions ' + (isVisible ? ' fa-minus-square' : ' fa-plus-square');
			var actionList = document.createElement('ul');
			actionList.className = 'action-list';
			var hasGroup = moreActions[0].actions !== undefined;
			var props = false;
			var minimizer = document.createElement('div');
			minimizer.className = 'more-actions hide-on-minimize' + (isVisible ? ' open' : '');
			var mTitle = document.createElement('span');
			mTitle.title = 'Mais ações';
			mTitle.className = initialClass;
			minimizer.appendChild(mTitle);
			var openMoreActions = document.createElement('span');
			openMoreActions.textContent = 'Mais ações';
			openMoreActions.className = 'open-more-actions';
			minimizer.appendChild(openMoreActions);
			ref.mainActions.appendChild(minimizer);
			var moreActionsElements = document.getElementsByClassName('open-more-actions');
			for (var act = 0; act < moreActionsElements.length; act++) {
				moreActionsElements[act].addEventListener('click', function(event) {
					var nextElement = document.getElementsByClassName('hidden-actions')[0];
					var state = 'visible';
					if (!nextElement.hidden) {
						nextElement.hidden = true;
						state = 'hidden';
					} else {
						nextElement.hidden = false;
					}
					ref.setCurrentState(state, '__default_state');
					if (mTitle.className.indexOf('fa-plus-square') > -1) {
						minimizer.addClass('open');
						mTitle.className = mTitle.className.replace( /(?:^|\s)fa-plus-square(?!\S)/g , ' fa-minus-square' );
					} else {
						minimizer.removeClass('open');
						mTitle.className = mTitle.className.replace( /(?:^|\s)fa-minus-square(?!\S)/g , ' fa-plus-square' );
					}
				});
			}
			var item = null;
			if (hasGroup) {
				for (var actGroup = 0; actGroup < moreActions.length; actGroup++) {
					var groupName = moreActions[actGroup].group;
					var actions = moreActions[actGroup].actions;
					var isFirst = true;
					for (var aIndex = 0; aIndex < actions.length; aIndex++) {
						var action = actions[aIndex];
						props = processProperties(action);
						if (props) {
							if (isFirst) {
								var li = document.createElement('li');
								li.textContent = groupName;
								li.className = 'action-group';
								actionList.appendChild(li);
								isFirst = false;
							}
							item = document.createElement('li');
							item.title = props.title;
							item.textContent = props.text;
							item.className = props.class;
							if (props.id) {
								item.id = props.id;
							}
							if (props['data-function']) {
								item.setAttribute('data-function', props['data-function']);
							}
							if (props['data-arguments']) {
								item.setAttribute('data-arguments', props['data-arguments']);
							}
							if (typeof(action['executeAction']) === 'function') {
								item['executeAction'] = action['executeAction'];
							}
							actionList.appendChild(item);
						}
					}
				}
			} else {
				for (var j = 0; j < moreActions.length; j++) {
					props = processProperties(moreActions[j]);
					if (props) {
						item = document.createElement('li');
						item.title = props.title;
						item.textContent = props.text;
						item.className = props.class;
						if (props.id) {
							item.id = props.id;
						}
						if (props['data-function']) {
							item.setAttribute('data-function', props['data-function']);
						}
						if (props['data-arguments']) {
							item.setAttribute('data-arguments', props['data-arguments']);
						}
						if (typeof(action['executeAction']) === 'function') {
							item['executeAction'] = action['executeAction'];
						}
						actionList.appendChild(item);
					}
				}
			}
			var hiddenActions = document.createElement('div');
			hiddenActions.hidden = !isVisible;
			hiddenActions.className = 'hidden-actions';
			hiddenActions.appendChild(actionList);
			minimizer.appendChild(hiddenActions);
			if (ref.currState == 'minimize') {
				document.getElementsByClassName('more-actions')[0].hidden = true;
			}
		}
		deferred.resolve();
	});
	return deferred.promise();
};

ActionBar.prototype.fnRemoveActions = function(showItems) {
	showItems = showItems || true;
	for (var key in this.permissions) {
		var elements = document.querySelectorAll('*[data-system-permission=' + key + '], *[data-system-action=' + key + ']:not(form)');
		var display = this.permissions[key] && showItems ? '' : 'none';
		for (var i = 0; i < elements.length; i++) {
			elements[i].style.display = display;
		}
	}
	if (!this.cta.length && this.mainActions) {
		 this.mainActions.style['margin-top'] = '5px';
	}
};

ActionBar.prototype.renderExternalLinks = function() {
	var links = document.createElement('div');
	links.className = 'new-side-bar-help-tools';
	for (var i = 0, length = this.externalLinks.length; i < length ; i++) {
		var text = this.externalLinks[i].text;
		delete this.externalLinks[i].text;
		var aLink = document.createElement('a');
		aLink.style.display = 'block';
		aLink.style.textDecoration = 'none';
		aLink.style.marginBottom = '5px';
		aLink.href = this.externalLinks[i].href;
		aLink.target = this.externalLinks[i].target;
		var spanFa = document.createElement('span');
		spanFa.className = 'fas fa-external-link-alt';
		aLink.appendChild(spanFa);
		var spanText = document.createElement('span');
		spanText.textContent = text;
		aLink.appendChild(spanText);
		links.appendChild(aLink);
	}
	var div = document.createElement('div');
	div.className = 'new-side-bar-info hide-on-minimize';
	var span = document.createElement('span');
	span.className = 'info-text';
	span.textContent = 'Ferramentas de apoio';
	div.appendChild(span);
	div.appendChild(links);
	var mainInfo = document.getElementById('main-info');
	mainInfo.parentElement.insertBefore(div, mainInfo.nextSibling);
};

ActionBar.prototype.setTotal = function(total, format) {
	total = total || 0;
	format = format || true;
	if (format) {
		total = nroBra(total);
	}
	var divTotal = document.querySelectorAll('#valor-total-lista .info-value')[0];
	divTotal.innerText = total;
	$(divTotal).parent().show();
};

ActionBar.prototype.enableActions = function(padrao, popoverPadrao, campos, campos2) {
	var i, j, element, elementChildren, title = '';
	var actionItems = document.getElementsByClassName('action-text');
	var countActionItems = false;
	var unblockedButtons = document.querySelectorAll('.main-actions > button:not(.active-when-selected):not(.link-sel):not(.always-active), .main-actions > div > button:not(.active-when-selected):not(.link-sel):not(.always-active)');
	var unblockedMoreActions = document.querySelectorAll('.action-list > .action-item:not(.active-when-selected):not(.always-active)');
	campos = campos || Array.prototype.slice.call(unblockedMoreActions).concat(Array.prototype.slice.call(unblockedButtons));
	campos2 = campos2 || document.getElementsByClassName('active-when-selected');
	if (padrao) {
		for (j = 0, itensL = actionItems.length; j < itensL; j++) {
			var actionItem = actionItems[j];
			if (actionItem.hasAttribute('data-toggle') && actionItem.getAttribute('data-toggle') == 'popover') {
				countActionItems = true;
				break;
			}
		}
	}
	for (i = 0, blockL = campos.length; i < blockL; i++) {
		element = campos[i];
		elementChild = element.children[1];
		element.removeClass('block');
		if (element.tagName == 'BUTTON') {
			if (padrao && !countActionItems) {
				title = element.getAttribute('title');
				elementChild.setAttribute('data-original-title', title);
				element.setAttribute('data-original-title', title);
				break;
			}
			element.removeAttribute('disabled');
			$(elementChild).popover('destroy');
			if (elementChild.hasAttribute('data-original-title')) {
				title = elementChild.getAttribute('data-original-title');
				element.setAttribute('title', title);
				elementChild.setAttribute('title', title);
			}
		} else {
			$(element).popover('destroy');
			element.setAttribute('title', element.innerHTML);
		}
	}
	for (i = 0,blockL = campos2.length; i < blockL; i++) {
		element = campos2[i];
		elementChild = element.children[1];
		if (!padrao) {
			element.addClass('block');
		}
		if (element.tagName == 'BUTTON') {
			title = '';
			element.setAttribute('disabled', 'disabled');
			criarPopover(elementChild, popoverPadrao);
			if (element.hasAttribute('title')) {
				title = element.getAttribute('title');
				elementChild.setAttribute('title', title);
				element.setAttribute('data-original-title', title);
			}
			element.removeAttribute('title');
			elementChild.setAttribute('data-original-title', title ? title : element.getAttribute('data-original-title'));
			elementChild.removeAttribute('title');
		} else {
			criarPopover(element, popoverPadrao);
		}
	}
}

//todo add a trigger on leave page to re-tggle the action bar
ActionBar.prototype.disable = function () {
	$(this.objBar).css({ 'opacity' : '0.6' });
	this.disableds = [];
	var that = this;
	$('.new-side-bar button, .common-action-container button').each(function(i, input){
		input = $(input);
		if (input.is(':disabled')) {
			that.disableds.push(input);
			return;
		}
		input.prop('disabled', true);
	});
	if (!document.getElementsByClassName('new-box-side-minimized').length ) {
		that.toggle('minimize');
		that.fnBeforeunload = function() {
			that.setCurrentState('maximize');
		}
		$(window).bind('beforeunload', that.fnBeforeunload);
	}
	this.disabled = true;
};

ActionBar.prototype.enable = function () {
	$(this.objBar).css({ 'opacity' : '1' });
	this.disableds = [];
	var that = this;
	$('.new-side-bar button, .common-action-container button').each(function(i, input){
		input = $(input);
		for (var i = 0, tot = that.disableds.length; i< tot; i++) {
			if (that.disableds[i][0] == input[0]) {
				return;
			}
		}
		input.prop('disabled', false);
	});
	this.disabled = false;
	if (document.getElementsByClassName('new-box-side-minimized').length ) {
		actionBar.toggle();
		$(window).unbind('beforeunload', this.fnBeforeunload);
	}
};

function criarPopover(field, padrao) {
	var size = $(document).width();
	field.setAttribute('data-toggle','popover');
	field.setAttribute('data-trigger', 'hover focus keeponhover');
	field.setAttribute('data-content', padrao ? 'Selecione um ou mais itens' : 'Remova as seleções realizadas');
	field.setAttribute('data-html', true);
	field.setAttribute('data-container', 'body');
	field.setAttribute('data-placement', size <= 768 ? 'auto' : 'left');
	$(field).on('show.bs.popover', function(e) {
		$(this).data('bs.popover').tip().addClass('popover-notitle');
	}).popover();
}
