var formContatoRapido = null;
function ContatoRapido(configurations) {
	this.config = {
		message : {
			naoEncontrado : 'Não Encontrado'
		},
		debug : false,
		id:'',
		editLink: 'contatos.php#edit',
		buttons : [] ,
		fieldsAssign: {
			action: false,
			fields: false,
			parent: '#edicao',
			fakeFields: [
				'id',
				'nome'
			]
		},
		input : '',//required
		acomplete: '',
		name: undefined,
		multi : false,
		sempreEditavel: false,
		tipoContato: '',
		applyFilter : false,
		interceptor: {
			clearForm : 'clearForm',
			desabilitaBotaoSalvar : 'desabilitaBotaoSalvar',
			habilitaBotaoSalvar : 'habilitaBotaoSalvar'
		},
		afterChange: undefined,
		form : {
			appendTo : $("#edicao"),
			slideIn: {
				mobile: false
			    },
			openField: 'nome'
		},
		fnRenderItemUi: null,
		extraValidation: undefined
	};
	this.campoContatoRapido = null;
	this.builder(configurations);
}

ContatoRapido.prototype.builder = function(configurations) {
	if (!this.loadDependences() || !this.readConfigurations(configurations)) {
		return;
	}
	if (formContatoRapido == null) {
		new FormContatoRapido(this.config.form);
	}
	if (this.config.multi) {
		this.campoContatoRapido = new MultiContatosRapidos(this.config);
		this.setActionsForm();
		return;
	}
	this.campoContatoRapido = new UnicoContatoRapido(this.config);
	this.setActionsForm();
};

ContatoRapido.prototype.loadDependences = function() {
	if (debug) {
		if (typeof xajax_buscarAutoCompletarContato == 'undefined') {
			console.log('xajax_buscarAutoCompletarContato não encontrado, favor faça o registro deste service');
			return false;
		}
		if (typeof xajax_obterTiposContatos == 'undefined') {
			console.log('xajax_obterTiposContatos não encontrado, favor faça o registro deste service');
			return false;
		}
		if (typeof xajax_validaCPFeCNPJ == 'undefined') {
			console.log('xajax_validaCPFeCNPJ não encontrado, favor faça o registro deste service');
			return false;
		}
		if (typeof xajax_buscarDadosContatoRapido == 'undefined') {
			console.log('xajax_buscarDadosContatoRapido não encontrado, favor faça o registro deste service');
			return false;
		}
		if (typeof xajax_salvarContatoRapido == 'undefined') {
			console.log('xajax_salvarContatoRapido não encontrado, favor faça o registro deste service');
			return false;
		}
	}
	return true;
};

ContatoRapido.prototype.readConfigurations = function(configurations) {
	LerConfiguracoes(this.config, configurations);
	this.config.multiTemporario = false;
	if (this.config.form.appendTo.length == 0 && debug) {
		console.log('Contato-Rápido: O destino para o formulário não foi encontrado, use o parâmetro appendTo para escolher outro destino');
		return false;
	}
	if (this.config.input == undefined && debug) {
		console.log('Contato-Rápido: O nome do input que armazena id não foi preenchido, preencha o parâmetro "input"');
		return false;
	}
	this.config.idField = this.config.input.replace('[','').replace(']','');
	this.config.acomplete = this.config.id;
	if (this.config.id == '') {
		this.config.id = this.config.idField;
		this.config.acomplete = 'input-acomplete-' + this.config.id;
	}
	this.config.input = $($('[name="' + this.config.input + '"]')[0]);
	if (this.config.input.length == 0 && debug) {
		console.log('Contato-Rápido: O nome do input que armazena id não foi preenchido, preencha o parâmetro "input" corretamente');
		return false;
	}
	if (this.config.editLink == '' && debug) {
		console.log('Contato-Rápido: O link para edição não foi encontrado, o parâmetro editLink é necessário especificar');
		return false;
	}
	this.config.message.placeholder = this.config.input.attr('placeholder');
	return true;
};

ContatoRapido.prototype.mostrarErros = function(erros, contato) {
	this.campoContatoRapido.mostrarErros(erros, contato);
};

ContatoRapido.prototype.limpar = function() {
	this.apenasLeitura(false);
	if (this.config.multiTemporario) {
		this.campoContatoRapido.remove();
		this.campoContatoRapido = new UnicoContatoRapido(this.config);
		return;
	}
	this.campoContatoRapido.limpar();
};

ContatoRapido.prototype.exibir = function(itens, disparAfterChange) {
	this.config.multiTemporario = false;
	if (Array.isArray(itens) && this.campoContatoRapido.constructor.name != 'MultiContatosRapidos') {
		if (itens.length > 1) {
			this.config.multiTemporario = true;
			this.campoContatoRapido.remove();
			this.campoContatoRapido = new MultiContatosRapidos(this.config);
		} else {
			itens = itens[0];
		}
	}
	this.campoContatoRapido.exibir(itens, disparAfterChange);
};

ContatoRapido.prototype.apenasLeitura = function(apenasLeitura) {
	var classe = this;
	formContatoRapido.apenasLeitura(apenasLeitura);
	classe.campoContatoRapido.apenasLeitura(apenasLeitura);
	setTimeout(function() {
		formContatoRapido.apenasLeitura(apenasLeitura);
		classe.campoContatoRapido.apenasLeitura(apenasLeitura);
	}, 400);
};

ContatoRapido.prototype.data = function() {
	return this.campoContatoRapido.data;
};

ContatoRapido.prototype.setActionsForm = function() {
	var contatoRapido = this;
	if (this.config.interceptor.clearForm) {
		window[this.config.interceptor.clearForm] = Interceptor.intercept(function() {
			contatoRapido.limpar();
		}, this.config.interceptor.clearForm, this.config.debug);
	}
	if (this.config.interceptor.desabilitaBotaoSalvar) {
		window[this.config.interceptor.desabilitaBotaoSalvar] = Interceptor.intercept(function() {
			contatoRapido.apenasLeitura(true);
		}, this.config.interceptor.desabilitaBotaoSalvar, this.config.debug);
	}
	if (this.config.interceptor.habilitaBotaoSalvar) {
		window[this.config.interceptor.habilitaBotaoSalvar] = Interceptor.intercept(function() {
			contatoRapido.apenasLeitura(false);
		}, this.config.interceptor.habilitaBotaoSalvar, this.config.debug);
	}
};

//SUPORTE PARA VERSÕES ANTIGAS SEM COMPONENTIZAÇÃO
function closeContatoRapido() {
	formContatoRapido.popUp.dialog("destroy");
}

//função suporte
function setarContato(id, nome, field) {
	document.getElementById(field).value = nome;
	$('#setarContatoDialog').click();
	document.getElementById(field).focus();
}
