(function($) {
	var defaultOptions = {
		data: {},
		selected: [],
		onlyLeafSelectable: false,
		maxSelectable: 0,
		onSelect: null,
		onUpdate: null,
		onOpen: null,
		parent: 'body',
		labels: {
			all: "Todas categorias",
			selected: "categorias selecionadas"
		},
		styles: {classes: ''},
		treeSearch: true,
		elementToAppend: '',
		orderBy: true
	}
	var defaultNodeAttrs = {
		situacao: 1
	}

	function Tree(elem, options) {
		this.options = $.extend({}, defaultOptions, options);
		this.treeData = options['data']
		this.arvore = {};
		this.mainUl = $('<ul>');
		this.instanceId = Math.floor(Math.random() * 999999);
		this.elemWrapperId = 'tree_select' + this.instanceId;
		this.options['searchInput'] = options['searchInput'] || '#' + this.elemWrapperId + ' #tree_seach';
		this.selected = this.options['selected'].length > 0 ? this.options['selected'] : [];
		this.elem = elem;
		this.init();
	}

	Tree.prototype = {
		buildTree: function(id, idCategoriaPai, height) {
			var treeElem = this.treeData[id];
			if (idCategoriaPai > 0 && this.treeData[idCategoriaPai] && height < 6) {
				var pai = this.buildTree(idCategoriaPai, this.treeData[idCategoriaPai]['idCategoriaPai'], height + 1);
				if (! pai['filhos'][id]) {
					this.treeData[idCategoriaPai]['filhos'] = $.merge(this.treeData[idCategoriaPai]['filhos'] || [], [id]);
					pai['filhos'][id] = {id: id, descricao: treeElem['descricao'], situacao: treeElem['situacao'], filhos: {}, ordem: treeElem['ordem']};
				}
				return pai['filhos'][id];
			} else {
				if (! this.arvore[id]) {
					this.arvore[id] = {id: id, descricao: treeElem['descricao'], situacao: treeElem['situacao'], filhos: {}, ordem: treeElem['ordem']}
				}
				return this.arvore[id];
			}
		},

		buildComponent: function(filter) {
			var _this = this;
			filter = this.normalizeStr(filter || '');
			this.arvore = {};
			arvoreSearchResult = [];
			$.each(this.treeData, function(i, categoria) {
				_this.treeData[i] = categoria = $.extend({}, defaultNodeAttrs, categoria);
				if (filter != '' && categoria['situacao'] == 1) {
					if (_this.normalizeStr(categoria['descricao']).startsWith(filter) || _this.normalizeStr(categoria['descricao']).includes(filter)) {
						arvoreSearchResult.push(categoria['id']);
					}
				}
				_this.buildTree(categoria['id'], categoria['idCategoriaPai'], 0);
			});

			this.mainUl = $('<ul>');
			$.each(this.options.orderBy ? this.sortBy(_this.arvore, 'descricao') : _this.arvore, function(i, categoria) {
				_this.buildSelect(_this.mainUl, _this.arvore[categoria['id']], 1);
			});
			this.mainUl.find('ul[data-id-parent]').hide();
			if (arvoreSearchResult.length > 0) {
				if (_this.options['maxSelectable'] == 1) {
					arvoreSearchResult = [arvoreSearchResult[0]];
				}
				this.mainUl.find('#lbl' + arvoreSearchResult.join(',#lbl')).each(function() {
					$(this).closest('li').addClass(_this.options['maxSelectable'] == 1 ? 'selected' : 'match-result').parents('ul').show();
				});
			}
			this.updateSelected(arvoreSearchResult.length > 0);
		},

		runCallback: function(callback, param) {
			if (typeof this.options[callback] == 'function') {
				this.options[callback](param);
			}
		},

		updateSelected: function(search) {
			var _this = this;
			if (this.options['maxSelectable'] == 1 && this.selected.length == 1) {
				if (! search) {
					this.mainUl.find('.selected').removeClass('selected');
					this.mainUl.find('li[data-id="' + this.selected[0] + '"]').addClass('selected');
				}
			} else {
				this.mainUl.find('#ckb' + this.selected.join(',#ckb')).prop('checked', true);
				$.each(this.selected, function(i, id) {
					_this.partialCheckParents(_this.treeData[id]['idCategoriaPai'])
				})
			}
		},

		partialCheckParents: function(idParent) {
			if (idParent > 0) {
				if ($('ul[data-id-parent="' + idParent + '"] :checkbox:checked', this.mainUl).length > 0) {
					$('li[data-id="' + idParent + '"] .input-checkbox', this.mainUl).addClass('checkbox-partial-check');
				} else {
					$('li[data-id="' + idParent + '"] .input-checkbox', this.mainUl).removeClass('checkbox-partial-check');
				}
				if (this.treeData[idParent]) {
					this.partialCheckParents(this.treeData[idParent]['idCategoriaPai'])
				}
			}
		},

		normalizeStr: function(str) {
			str = str.toLowerCase();
			if ("".normalize) {
				return str.normalize("NFD").replace(/[\u0300-\u036f]/g, "");
			}
			return str;
		},

		walkSelection: function(direction) {
			var selected = this.mainUl.find('.selected');
			var nextPrevius = selected[direction + 'All']('li, ul:visible').eq(0);

			if (nextPrevius.length == 1) {
				if (nextPrevius.prop('tagName') == 'UL') {
					if (direction == 'prev') {
						nextPrevius = nextPrevius.find('li:visible').last();
					} else {
						nextPrevius = nextPrevius.children('li').first();
					}
				}
			} else {
				var searchNextPrevius = selected;
				while (searchNextPrevius.parent().parent().attr('id') != this.elemWrapperId) {
					var nextPreviusFound = searchNextPrevius.parent()[direction + 'All']('li:visible').eq(0);
					if (nextPreviusFound.length == 1) {
						nextPrevius = nextPreviusFound;
						break;
					}
					searchNextPrevius = searchNextPrevius.parent();
				}
			}

			if (nextPrevius.length == 1) {
				selected.removeClass('selected');
				nextPrevius.addClass('selected')[0].scrollIntoView({block: 'nearest', inline: 'nearest'});
			}
		},

		registerEvents: function() {
			var _this = this;
			$(this.options['searchInput']).on('keydown', function(e) {
				if (e.which == 9) {
					_this.closeSelect();
				}

				if (_this.options['maxSelectable'] == 1) {
					if (e.which == 40) {
						_this.walkSelection('next');
						return false;
					}
					if (e.which == 38) {
						_this.walkSelection('prev');
						return false;
					}
				}
			})
			$(this.options['searchInput']).on('keyup', function(e) {
				if (e.which == 13 && _this instanceof TreeSelect) {
					if (_this.options['maxSelectable'] == 1) {
						var result = $('#' + _this.elemWrapperId + ' .match-result:first, #' + _this.elemWrapperId + ' .selected:first').eq(0);
						if (result) {
							result.trigger('click');
							if (result.next().prop('tagName') == 'UL' && result.next().is(':visible')) {
								var filhos = _this.treeData[result.attr('data-id')]['filhos'];
								if (filhos && filhos.length > 0) {
									_this.walkSelection('next');
								}
							} else {
								result.addClass('selected');
							}
						}
					} else {
						var checked = $('#' + _this.elemWrapperId + ' .match-result input:checkbox:checked').length > 0;
						$('#' + _this.elemWrapperId + ' .match-result input:checkbox').prop('checked', ! checked).trigger('change');
					}
				} else if (e.which != 38 && e.which != 40) {
					_this.buildComponent($(this).val());
					_this.registerTreeEvents();
					_this.updateComponent();
					if ($('li.match-result', _this.mainUl).length > 0) {
						$('.match-result')[0].scrollIntoViewIfNeeded();
					} else if ($('li.selected', _this.mainUl).length > 0) {
						_this.mainUl[0].scrollTop = $('.selected', _this.mainUl)[0].offsetTop;
					}
				}
			});
		},

		registerTreeEvents: function() {
			var _this = this;
			var checkboxes = $('[role="checkbox"]', this.mainUl);
			var lastChecked = null;

			$('input:checkbox', this.mainUl).on('change', function(e) {
				_this.onCheckboxClicked(this);
				e.stopPropagation();
			});

			checkboxes.on('click', function(e) {
				document.getSelection().removeAllRanges();
				if (! lastChecked) {
				    lastChecked = this;
				    return;
				}

				if(e.shiftKey) {
				    var start = checkboxes.index(this);
				    var end = checkboxes.index(lastChecked);
				    checkboxes.slice(Math.min(start, end), Math.max(start, end) + 1).each(function() {
				        $('#' + $(this).attr('for')).prop('checked', $('#' + $(lastChecked).attr('for')).prop('checked'));
				    });
				    _this.refreshSelected();
				    _this.runCallback('onSelect', _this.selected);
				    return false;
				}
			});
		},

		onCheckboxClicked: function(element) {
			var _this = this;
			var id = $(element).closest('li').attr('data-id');
			$(element).closest('.input-checkbox').removeClass('checkbox-partial-check');

			this.getContainer().find(' ul[data-id-parent=' + id + '] input:checkbox')
				.prop('checked', $(element).is(':checked'))
				.closest('.input-checkbox')
					.removeClass('checkbox-partial-check');
			this.refreshSelected();
			this.partialCheckParents(this.treeData[id]['idCategoriaPai']);
			this.runCallback('onSelect', this.selected);
		},

		refreshSelected: function() {
			var _this = this;
			this.selected = [];
			this.getContainer().find(' :checkbox:checked').each(function() {
				_this.selected.push($(this).closest('li').attr('data-id'));
			});
		},

		getSelected: function() {
			return this.selected;
		},

		expandToId: function(id) {
			$('li[data-id=' + id + ']', this.mainUl).parents('ul[data-id-parent]').map(function(i, ul) {
				$(ul).show();
				$('li[data-id=' + $(ul).attr('data-id-parent') + ']', this.mainUl).find('span.tree-arrow').attr('class', 'tree-arrow fa fa-caret-down');
			});
			if ($('li[data-id=' + id + ']', this.mainUl).length > 0) {
				$('li[data-id=' + id + ']', this.mainUl)[0].scrollIntoView({block: 'nearest', inline: 'nearest'});
			}
		},

		sortBy: function(obj, attr) {
			var list = Object.keys(obj).map(function(i, v) {
				return obj[i];
			});

			list.sort(function(a, b) {
				if (a['id'] == 0 || b['id'] == 0) {
					return 0;
				}
				if (a.ordem && a.ordem != 0) {
					return a.ordem;
				}
				if (b.ordem && b.ordem != 0) {
					return b.ordem;
				}
			    var textA = a[attr].toUpperCase();
				var textB = b[attr].toUpperCase();
			    return (textA < textB) ? -1 : (textA > textB) ? 1 : 0;
			});
			return list;
		},

		onExpand: function(element) {
			var ulChildSelect = 'ul[data-id-parent=' + $(element).attr('data-id') + ']';
			$(element).find('span.tree-arrow').removeClass('fa fa-caret-right fa-caret-down');
			if (this.mainUl.find(ulChildSelect).length > 0) {
				if (this.mainUl.find(ulChildSelect).is(':visible')) {
					this.mainUl.find(ulChildSelect).hide();
					$(element).find('span.tree-arrow').addClass('fa fa-caret-right');
				} else {
					this.mainUl.find(ulChildSelect).show();
					$(element).find('span.tree-arrow').addClass('fa fa-caret-down');
				}
			}
		}
	}

	function TreeList(elem, options) {
		Tree.apply(this, arguments);
		this.elemWrapperId = this.elem;
	}

	TreeList.prototype = $.extend(Object.create(Tree.prototype), {
		init: function() {
			if (this.mainUl.find('ul').length == 0) {
				this.buildComponent();
			}

			this.registerTreeEvents();
			this.registerEvents();
			$(this.elem).append(this.mainUl);
		},

		buildItem: function(categoria, attrs) {
			attrs = attrs || {};
			var checkbox = $('<div>', { class: 'input-checkbox'});
			checkbox.append(
				$('<input>', { type: 'checkbox', id: 'ckb' + categoria['id'] + this.instanceId }),
				$('<label>', { role: 'checkbox', for: 'ckb' + categoria['id'] + this.instanceId })
			);
			var hasChildren = ! $.isEmptyObject(categoria['filhos']);
			var nodeOptions = [];
			var li = $('<li>', $.extend({'data-id': categoria['id'], class: ! hasChildren ? 'tree-leaf' : ''}, attrs)).append(
				checkbox,
				$('<label>', { id: 'lbl' + categoria['id'], for: 'ckb' + categoria['id'] + this.instanceId, text: categoria['descricao']})
			)

			if (hasChildren) {
				li.prepend(
					$('<span>', {class: 'tree-arrow fa fa-caret-right'})
				);
			}

			if (typeof this.options['line'] == 'function') {
				return this.options['line'](li, categoria);
			}
			return li;
		},

		addNode: function(node) {
			var _this = this;
			this.treeData[node.id] = node;
			this.buildTree(node['id'], node['idCategoriaPai'], 0);
			$.each(this.arvore, function(i, categoria) {
				_this.buildSelect(_this.mainUl, categoria, 1);
			});
			$('li[data-id=' + node['idCategoriaPai'] + ']', this.mainUl).prepend(
				$('<span>', {class: 'tree-arrow fa fa-caret-down'})
			);
			$('li[data-id=' + node.id + ']')[0].scrollIntoView({block: 'nearest', inline: 'nearest'});
			this.registerTreeEvents();
		},

		removeNode: function(id) {
			var _this = this;
			var idCategoriaPai = this.treeData[id]['idCategoriaPai'];
			delete this.treeData[id];
			this.arvore = {};
			if (! $.isEmptyObject(this.treeData)) {
				$.each(this.treeData, function(i, node) {
					if (node) {
						node['filhos'] = [];
					}
				});
				$.each(this.treeData, function(i, categoria) {
					if (categoria) {
						_this.buildTree(categoria['id'], categoria['idCategoriaPai'], 0);
					}
				});
			}
			$('li[data-id=' + id + ']', this.mainUl).remove();
			if (this.treeData[idCategoriaPai] && this.treeData[idCategoriaPai]['filhos'].length == 0) {
				$('li[data-id=' + idCategoriaPai + '] .tree-arrow, ul[data-id-parent=' + idCategoriaPai + ']').remove();
			}
		},

		clearTree: function() {
			$(this.elem).find('ul').remove();
			this.treeData = {};
		},

		buildSelect: function(ul, categoria, treeHeight) {
			if ($('li[data-id=' + categoria['id'] + ']', ul).length == 0) {
				ul.append(this.buildItem(categoria, {style: "padding-left: " + 15 * treeHeight + "px"}));
			}

			if (! $.isEmptyObject(categoria['filhos'])) {
				if ($('ul[data-id-parent=' + categoria['id'] + ']', ul).length == 0) {
					$('li[data-id=' + categoria['id'] + ']', ul).after($('<ul>', { 'data-id-parent': categoria['id']}));
				}
				$.each(this.sortBy(categoria['filhos'], 'descricao'), function(id, children) {
					this.buildSelect($('ul[data-id-parent=' + categoria['id'] +']', ul), children, treeHeight + 1);
				}.bind(this));
			}
		},

		registerTreeEvents: function() {
			Tree.prototype.registerTreeEvents.call(this);
			var _this = this;
			$('li', this.mainUl).off('click').on('click', function() {
				_this.onExpand(this);
			});

		},

		updateComponent: function() {
			$(this.elem).find('ul').remove();
			$(this.elem).append(this.mainUl);
			this.runCallback('onUpdate');
		},

		getContainer: function() {
			return this.elem;
		}
	});

	function TreeSelect(elem, options) {
		Tree.apply(this, arguments);
		$.ui.dialog.prototype._focusTabbable = $.noop;
		this.elemWrapperId = 'tree_select' + Math.floor(Math.random() * 999999);
		this.options['searchInput'] = '#' + this.elemWrapperId + ' #tree_seach';
		this.options['idList'] = '#' + this.elemWrapperId;
	}

	TreeSelect.prototype = $.extend(Object.create(Tree.prototype), {
		init: function() {
			var _this = this;
			this.elem.on('click', function(e) {
				if (this.isEnabled()) {
					this.open();
					e.stopPropagation();
					$(document)
						.on('click.treeSelect, mouseup.treeSelect', this.handleClickOut.bind(this))
						.on('keyup.treeSelect', this.handleKeyClose.bind(this));
				}
			}.bind(this));
			this.elem.on('focus', function(e) {
				$(this).on('keydown', function(e) {
					var keyAZ = e.keyCode >= 65 && e.keyCode <= 90;
					var key09 = e.keyCode >= 48 && e.keyCode <= 57;
					if (e.which == 40 || keyAZ || key09) {
						$(_this.elem).click();
						$(_this.elem).off('keydown');
					}
				});
			}).on('focusout', function() {
				$(_this.elem).off('keydown');
			});
			this.updateSelect();
		},

		isEnabled: function() {
			return ! this.elem.attr('readonly') && ! this.elem.attr('disabled');
		},

		buildItem: function(categoria, attrs) {
			attrs = attrs || {};
			var hasChildren = 0 < this.countValidChildren(this.treeData[categoria['id']]['filhos']);
			if (this.options.treeSearch) {
				var checkbox = $('<div>', { class: 'input-checkbox'});
				if (this.options['maxSelectable'] != 1) {
					if (this.options['onlyLeafSelectable'] == true) {
						if (hasChildren) {
							checkbox.append(
								$('<input>', { type: 'checkbox', id: 'ckb' + categoria['id'] }),
								$('<label>', { for: 'ckb' + categoria['id'] })
							);
						}
					} else {
						checkbox.append(
							$('<input>', { type: 'checkbox', id: 'ckb' + categoria['id'] }),
							$('<label>', { for: 'ckb' + categoria['id'] })
						);
					}
				}
			}
			var item = $('<li>', $.extend({'data-id': categoria['id'], class: ! hasChildren && this.options['onlyLeafSelectable'] ? 'tree-leaf' : ''}, attrs)).append(
				checkbox,
				$('<label>', { id: 'lbl' + categoria['id'], for: 'ckb' + categoria['id'], text: categoria['descricao']})
			);

			if (hasChildren) {
				item.prepend(
					$('<span>', {class: 'tree-arrow fa fa-caret-right'})
				);
			}

			return item;
		},

		countValidChildren: function(children) {
			var _this = this;
			if (! children || $.isEmptyObject(children)) {
				return 0;
			}
			return children.reduce(function(count, id) {
				if (typeof _this.treeData[id]['situacao'] != undefined) {
					if (_this.treeData[id]['situacao'] == 1) {
						return count + 1;
					}
				} else {
					return count + 1;
				}
				return count;
			}, 0);
		},

		buildSelect: function(ul, categoria, treeHeight) {
			if(categoria['situacao'] == 1) {
				if (this.countValidChildren(this.treeData[categoria['id']]['filhos']) > 0) {
					ul.append(this.buildItem(categoria, {style: "padding-left: " + 10 * treeHeight + "px"}));
					var ulChildren = $('<ul>', { 'data-id-parent': categoria['id']})
					$.each(this.sortBy(categoria['filhos'], 'descricao'), function(id, children) {
						this.buildSelect(ulChildren, children, treeHeight + 1);
					}.bind(this))
					ul.append(ulChildren);
				} else {
					ul.append(this.buildItem(categoria, { style: "padding-left: " + 10 * treeHeight + "px"}));
				}
			}
		},

		open: function() {
			if (this.mainUl.html() == '') {
				this.buildComponent();
			}

			this.registerTreeEvents();
			var offset = this.elem.offset();
			if ($('#' + this.elemWrapperId).length == 0) {
				$(this.options.parent).append(
					$('<div>', { id: this.elemWrapperId, class: 'tree-select-container treeselect-container'})
				);
			}
			$('#' + this.elemWrapperId + ' ul').remove();
			if (!this.largura) {
				var toTest = $('<div>', {class: 'tree-select-container'}).append(
					this.mainUl.clone()
				)
				$('body').append(toTest);
				this.largura = toTest.outerWidth();
				toTest.remove();
				var wEl = this.elem.outerWidth();
				if (wEl > this.largura) {
					this.largura = wEl;
				}
			}
			if (!this.options.treeSearch) {
				offset.top += 30;
				offset.left += 10;
				this.largura = wEl - 20;
			}
			var treeSearchElement = '';
			if (this.options.treeSearch) {
				treeSearchElement = $('<div>', { id: 'tree_seach_container'}).append(
					$('<input>', { id: 'tree_seach', class: 'item-form', type: 'text'})
				)
			}
			$('#' + this.elemWrapperId)
				.show()
				.append(
					treeSearchElement,
					this.mainUl,
					(this.options.elementToAppend ? this.options.elementToAppend : '')
				).offset(offset).css('min-width', this.largura + 'px');
			$('#tree_seach').focus();
			$('.match-result').removeClass('match-result');
			if (this.selected.length > 0) {
				this.expandToId(this.selected[0]);
			}
			this.registerEvents();
			this.runCallback('onOpen')
		},

		registerTreeEvents: function() {
			Tree.prototype.registerTreeEvents.call(this);
			var _this = this;
			if (_this.options['maxSelectable'] == 1) {
				var selectableNodes = _this.options['onlyLeafSelectable'] ? '.tree-leaf' : 'li';
				$(selectableNodes, this.mainUl).on('click', function(e) {
					if (selectableNodes == 'li' && ($(e.target).is('span.tree-arrow'))) {
						return;
					}
					_this.selected = [$(this).closest('li').attr('data-id')];
					_this.closeSelect();
					_this.updateSelected();
					_this.runCallback('onSelect', _this.selected);
				});
			}
			$('li', this.mainUl).on('click', function() {
				_this.onExpand(this);
			});
			$('.tree-leaf', this.mainUl).on('click', function(e) {
				if (e.target == this) {
					var checkbox = $('#ckb' + $(this).attr('data-id'), _this.mainUl);
					checkbox.prop('checked', ! checkbox.prop('checked')).trigger('change');
				}
			})
		},

		updateSelect: function() {
			var countSelected = this.selected.length;
			var selectInfoText = '';
			if (countSelected > 0) {
				if (countSelected > 1) {
					selectInfoText = countSelected + ' '+ this.options.labels.selected;
				} else {
					if (this.treeData[this.selected[0]]) {
						selectInfoText = this.treeData[this.selected[0]]['descricao'];
					}
				}
			} else {
				selectInfoText =  this.options.labels.all;
			}
			this.elem.html('').append(
				$('<div>', { class: this.options.styles.classes }).append(
					$('<span>', { text:  selectInfoText })
				)
			)
		},

		handleClickOut: function(e) {
			if ($('#' + this.elemWrapperId + ':visible').length > 0 &&
				! (this.elem.attr('id') == $(e.target).attr('id') || $(e.target).closest('.tree-select-container').length > 0)) {
				this.closeSelect();
			}
		},

		handleKeyClose: function(e) {
			if (e.key === "Escape") {
				this.closeSelect();
			}
		},

		closeSelect: function() {
			$('.tree-select-container').hide().html('');
			this.updateSelect();
			$(document).off('.treeSelect');
			$(this.elem).focus();
		},

		setSelected: function(selected) {
			this.selected = selected;
			this.updateSelected();
			this.updateSelect();
			if ($('#' + this.elemWrapperId).length != 0) {
				this.closeSelect();
			}
			this.mainUl.html('');
		},

		destroy: function() {
			this.elem.off('click focus keydown focusout');
			$('#' + this.elemWrapperId).remove();
		},

		updateComponent: function() {
			$('#' + this.elemWrapperId + ' ul').remove();
			$('#' + this.elemWrapperId).append(this.mainUl);
			this.runCallback('onUpdate');
		},

		getContainer: function() {
			return $('#' + this.elemWrapperId);
		}
	});

	function bindComponent(args, name, obj) {
		var elementData = $(this).data(name);
		if (elementData && elementData[args[0]]) {
            return elementData[args[0]].apply(elementData, Array.prototype.slice.call(args, 1));
        } else if (typeof args[0] === 'object' || ! args[0]) {
        	return this.each(function() {
	            $(this).data(name, new obj($(this), args[0]));
	        });
        }
	}

	$.fn.treeList = function() {
		return bindComponent.apply(this, [arguments, 'treeList', TreeList]);
	}

	$.fn.treeSelect = function() {
		return bindComponent.apply(this, [arguments, 'treeSelect', TreeSelect]);
	}
})(jQuery);